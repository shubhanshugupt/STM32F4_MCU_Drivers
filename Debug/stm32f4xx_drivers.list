
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ca0  08000ca8  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ca0  08000ca0  00010ca8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca0  08000ca0  00010ca8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca0  08000ca8  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ca8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ca8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd7  00000000  00000000  00010cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004d6  00000000  00000000  000128af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00012d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00012f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002132  00000000  00000000  000130a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001304  00000000  00000000  000151d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008e6e  00000000  00000000  000164d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000640  00000000  00000000  0001f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c88 	.word	0x08000c88

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c88 	.word	0x08000c88

080001e8 <delay>:
 * SPI_MISO	->	PB14
 * SPI_MOSI	->	PB15
 */

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<=1000000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000f4240 	.word	0x000f4240

08000214 <BlinkLed>:

void BlinkLed(uint8_t Read)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	210c      	movs	r1, #12
 8000222:	480e      	ldr	r0, [pc, #56]	; (800025c <BlinkLed+0x48>)
 8000224:	f000 fb94 	bl	8000950 <GPIO_WriteToOPPin>
	while (Read > 0)
 8000228:	e010      	b.n	800024c <BlinkLed+0x38>
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	210c      	movs	r1, #12
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <BlinkLed+0x48>)
 8000230:	f000 fb8e 	bl	8000950 <GPIO_WriteToOPPin>
		delay();
 8000234:	f7ff ffd8 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	210c      	movs	r1, #12
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <BlinkLed+0x48>)
 800023e:	f000 fb87 	bl	8000950 <GPIO_WriteToOPPin>
		delay();
 8000242:	f7ff ffd1 	bl	80001e8 <delay>
		Read--;
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	3b01      	subs	r3, #1
 800024a:	71fb      	strb	r3, [r7, #7]
	while (Read > 0)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1eb      	bne.n	800022a <BlinkLed+0x16>
	}
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020c00 	.word	0x40020c00

08000260 <SPI2_GPIOInits>:


/*------Function to initialize GPIO PIN as SPI PIN-------*/
void SPI2_GPIOInits(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2Pins;

	SPI2Pins.pGPIOx = GPIOB;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <SPI2_GPIOInits+0x58>)
 8000268:	607b      	str	r3, [r7, #4]
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800026a:	2302      	movs	r3, #2
 800026c:	727b      	strb	r3, [r7, #9]
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFuncMode = AF5;
 800026e:	2305      	movs	r3, #5
 8000270:	737b      	strb	r3, [r7, #13]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000272:	2300      	movs	r3, #0
 8000274:	733b      	strb	r3, [r7, #12]
	SPI2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]
	SPI2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800027a:	2302      	movs	r3, #2
 800027c:	72bb      	strb	r3, [r7, #10]

	// Enable SCLK
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800027e:	230d      	movs	r3, #13
 8000280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f9e7 	bl	8000658 <GPIO_Init>

	// Enable NSS
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800028a:	230c      	movs	r3, #12
 800028c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f9e1 	bl	8000658 <GPIO_Init>

	// Enable MOSI
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000296:	230e      	movs	r3, #14
 8000298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f9db 	bl	8000658 <GPIO_Init>

	// Enable MISO
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80002a2:	230f      	movs	r3, #15
 80002a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f9d5 	bl	8000658 <GPIO_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <SPI2Init>:


/*------Function to initialize SPI2 Peripheral--------*/
void SPI2Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <SPI2Init+0x38>)
 80002c4:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPI_PinConfig.SPI_DeviceMode	= SPI_MODE_SLAVE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPI_PinConfig.SPI_BusConfig	= SPI_BUS_FULL_DUP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPI_PinConfig.SPI_DFF		= SPI_DFF_8BIT;
 80002ce:	2300      	movs	r3, #0
 80002d0:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPI_PinConfig.SPI_CPHA		= SPI_CPHA_FIRST_EDGE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPI_PinConfig.SPI_CPOL		= SPI_CPOL_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_PinConfig.SPI_SSM		= SPI_SSM_DI;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_PinConfig.SPI_SCLKSpeed	= SPI_SCLK_BY_8;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 80002e2:	463b      	mov	r3, r7
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fbb3 	bl	8000a50 <SPI_Init>
}
 80002ea:	bf00      	nop
 80002ec:	3720      	adds	r7, #32
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40003800 	.word	0x40003800

080002f8 <GPIOLedInit>:

void GPIOLedInit(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
	//Create and initialize the Handle structure for GPIO LED
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOD;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <GPIOLedInit+0x30>)
 8000300:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000302:	230c      	movs	r3, #12
 8000304:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000306:	2301      	movs	r3, #1
 8000308:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800030a:	2301      	movs	r3, #1
 800030c:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 800030e:	2300      	movs	r3, #0
 8000310:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000312:	2300      	movs	r3, #0
 8000314:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOLed);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f99d 	bl	8000658 <GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020c00 	.word	0x40020c00

0800032c <main>:


int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	uint8_t Data = 6;
 8000332:	2306      	movs	r3, #6
 8000334:	71fb      	strb	r3, [r7, #7]
	uint8_t Read = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	71bb      	strb	r3, [r7, #6]

	// Initialize GPIO PIN to behave as SPI PIN
	SPI2_GPIOInits();
 800033a:	f7ff ff91 	bl	8000260 <SPI2_GPIOInits>

	// Initialize GPIO PIN for LED
	GPIOLedInit();
 800033e:	f7ff ffdb 	bl	80002f8 <GPIOLedInit>

	// Initialize SPI peripheral parameters
	SPI2Init();
 8000342:	f7ff ffbb 	bl	80002bc <SPI2Init>

	// Since SSM is enabled, SSI bit needs to be kept low.
	//SPI_SSIConfig(SPI2, DISABLE);

	// Enable the SPI2 peripheral
	SPI_PCtrl(SPI2, ENABLE);
 8000346:	2101      	movs	r1, #1
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <main+0x5c>)
 800034a:	f000 fc5c 	bl	8000c06 <SPI_PCtrl>

	SPI_DataSend(SPI2, &Data, 1);
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	2201      	movs	r2, #1
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <main+0x5c>)
 8000356:	f000 fbea 	bl	8000b2e <SPI_DataSend>
	SPI_DataReceive(SPI2, &Read, 1);
 800035a:	1dbb      	adds	r3, r7, #6
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	4809      	ldr	r0, [pc, #36]	; (8000388 <main+0x5c>)
 8000362:	f000 fc1a 	bl	8000b9a <SPI_DataReceive>

	//Wait till SPI is busy
	while( FlagStatus(SPI2, SPI_BUSY_FLAG) );
 8000366:	bf00      	nop
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <main+0x5c>)
 800036c:	f000 fbcb 	bl	8000b06 <FlagStatus>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1f8      	bne.n	8000368 <main+0x3c>

	//Disable the SPI2 peripheral
	SPI_PCtrl(SPI2, DISABLE);
 8000376:	2100      	movs	r1, #0
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <main+0x5c>)
 800037a:	f000 fc44 	bl	8000c06 <SPI_PCtrl>

	BlinkLed(Read);
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff47 	bl	8000214 <BlinkLed>

	while(1);
 8000386:	e7fe      	b.n	8000386 <main+0x5a>
 8000388:	40003800 	.word	0x40003800

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 fc41 	bl	8000c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ffb5 	bl	800032c <main>

080003c2 <LoopForever>:

LoopForever:
    b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000ca8 	.word	0x08000ca8
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	2000001c 	.word	0x2000001c

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <CONV_GPIOx_TO_PORTCODE>:


/* This function returns a code (0-7) for a given GPIOx peripheral */

uint8_t CONV_GPIOx_TO_PORTCODE(GPIO_RegDef_t *pGPIOx)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	uint8_t portcode = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
	if (pGPIOx == GPIOA)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <CONV_GPIOx_TO_PORTCODE+0x88>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d102      	bne.n	80003fa <CONV_GPIOx_TO_PORTCODE+0x1a>
	{
		portcode = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	e02f      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOB)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <CONV_GPIOx_TO_PORTCODE+0x8c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d102      	bne.n	8000408 <CONV_GPIOx_TO_PORTCODE+0x28>
	{
		portcode = 1;
 8000402:	2301      	movs	r3, #1
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e028      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOC)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a19      	ldr	r2, [pc, #100]	; (8000470 <CONV_GPIOx_TO_PORTCODE+0x90>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d102      	bne.n	8000416 <CONV_GPIOx_TO_PORTCODE+0x36>
	{
		portcode = 2;
 8000410:	2302      	movs	r3, #2
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e021      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOD)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <CONV_GPIOx_TO_PORTCODE+0x94>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d102      	bne.n	8000424 <CONV_GPIOx_TO_PORTCODE+0x44>
	{
		portcode = 3;
 800041e:	2303      	movs	r3, #3
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e01a      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOE)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <CONV_GPIOx_TO_PORTCODE+0x98>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d102      	bne.n	8000432 <CONV_GPIOx_TO_PORTCODE+0x52>
	{
		portcode = 4;
 800042c:	2304      	movs	r3, #4
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	e013      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOF)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a11      	ldr	r2, [pc, #68]	; (800047c <CONV_GPIOx_TO_PORTCODE+0x9c>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d102      	bne.n	8000440 <CONV_GPIOx_TO_PORTCODE+0x60>
	{
		portcode = 5;
 800043a:	2305      	movs	r3, #5
 800043c:	73fb      	strb	r3, [r7, #15]
 800043e:	e00c      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOG)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <CONV_GPIOx_TO_PORTCODE+0xa0>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d102      	bne.n	800044e <CONV_GPIOx_TO_PORTCODE+0x6e>
	{
		portcode = 6;
 8000448:	2306      	movs	r3, #6
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e005      	b.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOH)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <CONV_GPIOx_TO_PORTCODE+0xa4>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d101      	bne.n	800045a <CONV_GPIOx_TO_PORTCODE+0x7a>
	{
		portcode = 7;
 8000456:	2307      	movs	r3, #7
 8000458:	73fb      	strb	r3, [r7, #15]
	}
	return portcode;
 800045a:	7bfb      	ldrb	r3, [r7, #15]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40020000 	.word	0x40020000
 800046c:	40020400 	.word	0x40020400
 8000470:	40020800 	.word	0x40020800
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40021000 	.word	0x40021000
 800047c:	40021400 	.word	0x40021400
 8000480:	40021800 	.word	0x40021800
 8000484:	40021c00 	.word	0x40021c00

08000488 <GPIO_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d162      	bne.n	8000560 <GPIO_PClkCtrl+0xd8>
	{
		if (pGPIOx == GPIOA)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a64      	ldr	r2, [pc, #400]	; (8000630 <GPIO_PClkCtrl+0x1a8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PClkCtrl+0x28>
		{
			GPIOA_CLK_EN();
 80004a2:	4b64      	ldr	r3, [pc, #400]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a63      	ldr	r2, [pc, #396]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_CLK_DI();
		}
	}

}
 80004ae:	e0b9      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a61      	ldr	r2, [pc, #388]	; (8000638 <GPIO_PClkCtrl+0x1b0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PClkCtrl+0x3e>
			GPIOB_CLK_EN();
 80004b8:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a5d      	ldr	r2, [pc, #372]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e0ae      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a5c      	ldr	r2, [pc, #368]	; (800063c <GPIO_PClkCtrl+0x1b4>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PClkCtrl+0x54>
			GPIOC_CLK_EN();
 80004ce:	4b59      	ldr	r3, [pc, #356]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a58      	ldr	r2, [pc, #352]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e0a3      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a58      	ldr	r2, [pc, #352]	; (8000640 <GPIO_PClkCtrl+0x1b8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PClkCtrl+0x6a>
			GPIOD_CLK_EN();
 80004e4:	4b53      	ldr	r3, [pc, #332]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a52      	ldr	r2, [pc, #328]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	e098      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a53      	ldr	r2, [pc, #332]	; (8000644 <GPIO_PClkCtrl+0x1bc>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PClkCtrl+0x80>
			GPIOE_CLK_EN();
 80004fa:	4b4e      	ldr	r3, [pc, #312]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a4d      	ldr	r2, [pc, #308]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000500:	f043 0310 	orr.w	r3, r3, #16
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000506:	e08d      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a4f      	ldr	r2, [pc, #316]	; (8000648 <GPIO_PClkCtrl+0x1c0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PClkCtrl+0x96>
			GPIOF_CLK_EN();
 8000510:	4b48      	ldr	r3, [pc, #288]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a47      	ldr	r2, [pc, #284]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051c:	e082      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a4a      	ldr	r2, [pc, #296]	; (800064c <GPIO_PClkCtrl+0x1c4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PClkCtrl+0xac>
			GPIOG_CLK_EN();
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a42      	ldr	r2, [pc, #264]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800052c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000532:	e077      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a46      	ldr	r2, [pc, #280]	; (8000650 <GPIO_PClkCtrl+0x1c8>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PClkCtrl+0xc2>
			GPIOH_CLK_EN();
 800053c:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a3c      	ldr	r2, [pc, #240]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000548:	e06c      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a41      	ldr	r2, [pc, #260]	; (8000654 <GPIO_PClkCtrl+0x1cc>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d168      	bne.n	8000624 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_EN();
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a37      	ldr	r2, [pc, #220]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055e:	e061      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		if (pGPIOx == GPIOA)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a33      	ldr	r2, [pc, #204]	; (8000630 <GPIO_PClkCtrl+0x1a8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PClkCtrl+0xee>
			GPIOA_CLK_DI();
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a31      	ldr	r2, [pc, #196]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800056e:	f023 0301 	bic.w	r3, r3, #1
 8000572:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000574:	e056      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <GPIO_PClkCtrl+0x1b0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <GPIO_PClkCtrl+0x104>
			GPIOB_CLK_DI();
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000584:	f023 0302 	bic.w	r3, r3, #2
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058a:	e04b      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a2b      	ldr	r2, [pc, #172]	; (800063c <GPIO_PClkCtrl+0x1b4>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <GPIO_PClkCtrl+0x11a>
			GPIOC_CLK_DI();
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800059a:	f023 0304 	bic.w	r3, r3, #4
 800059e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a0:	e040      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <GPIO_PClkCtrl+0x1b8>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_PClkCtrl+0x130>
			GPIOD_CLK_DI();
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a21      	ldr	r2, [pc, #132]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005b0:	f023 0308 	bic.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b6:	e035      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <GPIO_PClkCtrl+0x1bc>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_PClkCtrl+0x146>
			GPIOE_CLK_DI();
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005c6:	f023 0310 	bic.w	r3, r3, #16
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005cc:	e02a      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <GPIO_PClkCtrl+0x1c0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_PClkCtrl+0x15c>
			GPIOF_CLK_DI();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005dc:	f023 0320 	bic.w	r3, r3, #32
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e2:	e01f      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <GPIO_PClkCtrl+0x1c4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_PClkCtrl+0x172>
			GPIOG_CLK_DI();
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 80005f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f8:	e014      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <GPIO_PClkCtrl+0x1c8>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_PClkCtrl+0x188>
			GPIOH_CLK_DI();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 8000608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060e:	e009      	b.n	8000624 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <GPIO_PClkCtrl+0x1cc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d105      	bne.n	8000624 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_DI();
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <GPIO_PClkCtrl+0x1ac>)
 800061e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40020000 	.word	0x40020000
 8000634:	40023800 	.word	0x40023800
 8000638:	40020400 	.word	0x40020400
 800063c:	40020800 	.word	0x40020800
 8000640:	40020c00 	.word	0x40020c00
 8000644:	40021000 	.word	0x40021000
 8000648:	40021400 	.word	0x40021400
 800064c:	40021800 	.word	0x40021800
 8000650:	40021c00 	.word	0x40021c00
 8000654:	40022000 	.word	0x40022000

08000658 <GPIO_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	//0. Enable the Peripheral clock							//Updated on 19-Feb-2021
	GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff0e 	bl	8000488 <GPIO_PClkCtrl>

	uint32_t	temp = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d820      	bhi.n	80006ba <GPIO_Init+0x62>
	{
		//If the given Pin mode <= 3, it is non-interrupt mode, else interrupt mode
		//Left shifting 2 bit MODE value for specific PIN number
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	60fb      	str	r3, [r7, #12]

		// Clear the register values for specific pin
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	2103      	movs	r1, #3
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
		// set the MODE register for the specific pin
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6819      	ldr	r1, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e095      	b.n	80007e6 <GPIO_Init+0x18e>
	}
	else
	{
		//The interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d117      	bne.n	80006f2 <GPIO_Init+0x9a>
		{
			//1. Configure FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4ba0      	ldr	r3, [pc, #640]	; (8000944 <GPIO_Init+0x2ec>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a9c      	ldr	r2, [pc, #624]	; (8000944 <GPIO_Init+0x2ec>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	60d3      	str	r3, [r2, #12]
			//Also reset the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b9a      	ldr	r3, [pc, #616]	; (8000944 <GPIO_Init+0x2ec>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a96      	ldr	r2, [pc, #600]	; (8000944 <GPIO_Init+0x2ec>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	6093      	str	r3, [r2, #8]
 80006f0:	e035      	b.n	800075e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d117      	bne.n	800072a <GPIO_Init+0xd2>
		{
			//1. Configure RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fa:	4b92      	ldr	r3, [pc, #584]	; (8000944 <GPIO_Init+0x2ec>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7912      	ldrb	r2, [r2, #4]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	4611      	mov	r1, r2
 800070a:	4a8e      	ldr	r2, [pc, #568]	; (8000944 <GPIO_Init+0x2ec>)
 800070c:	430b      	orrs	r3, r1
 800070e:	6093      	str	r3, [r2, #8]
			//Also reset the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000710:	4b8c      	ldr	r3, [pc, #560]	; (8000944 <GPIO_Init+0x2ec>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	43d2      	mvns	r2, r2
 8000720:	4611      	mov	r1, r2
 8000722:	4a88      	ldr	r2, [pc, #544]	; (8000944 <GPIO_Init+0x2ec>)
 8000724:	400b      	ands	r3, r1
 8000726:	60d3      	str	r3, [r2, #12]
 8000728:	e019      	b.n	800075e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	795b      	ldrb	r3, [r3, #5]
 800072e:	2b06      	cmp	r3, #6
 8000730:	d115      	bne.n	800075e <GPIO_Init+0x106>
		{
			//1. Configure FTSR and RTSR both
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000732:	4b84      	ldr	r3, [pc, #528]	; (8000944 <GPIO_Init+0x2ec>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7912      	ldrb	r2, [r2, #4]
 800073a:	4611      	mov	r1, r2
 800073c:	2201      	movs	r2, #1
 800073e:	408a      	lsls	r2, r1
 8000740:	4611      	mov	r1, r2
 8000742:	4a80      	ldr	r2, [pc, #512]	; (8000944 <GPIO_Init+0x2ec>)
 8000744:	430b      	orrs	r3, r1
 8000746:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <GPIO_Init+0x2ec>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a7a      	ldr	r2, [pc, #488]	; (8000944 <GPIO_Init+0x2ec>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6093      	str	r3, [r2, #8]

		}

		//2. Configure the PORT selection in SYSCFG_EXTICR
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;			//Finds the EXTI register to be configured, each register has 4 EXTIx
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;			//Finds the position of EXTIx in the EXTI register
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	72bb      	strb	r3, [r7, #10]

		SYSCFG_CLK_EN();
 8000770:	4b75      	ldr	r3, [pc, #468]	; (8000948 <GPIO_Init+0x2f0>)
 8000772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000774:	4a74      	ldr	r2, [pc, #464]	; (8000948 <GPIO_Init+0x2f0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t portcode = CONV_GPIOx_TO_PORTCODE(pGPIOHandle->pGPIOx);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fe2d 	bl	80003e0 <CONV_GPIOx_TO_PORTCODE>
 8000786:	4603      	mov	r3, r0
 8000788:	727b      	strb	r3, [r7, #9]

		SYSCFG->EXTICR[temp1] &= ~(0xF << 4*temp2);
 800078a:	4a70      	ldr	r2, [pc, #448]	; (800094c <GPIO_Init+0x2f4>)
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	3302      	adds	r3, #2
 8000790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000794:	7abb      	ldrb	r3, [r7, #10]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	210f      	movs	r1, #15
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	496a      	ldr	r1, [pc, #424]	; (800094c <GPIO_Init+0x2f4>)
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	4002      	ands	r2, r0
 80007a8:	3302      	adds	r3, #2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= (portcode << 4*temp2);
 80007ae:	4a67      	ldr	r2, [pc, #412]	; (800094c <GPIO_Init+0x2f4>)
 80007b0:	7afb      	ldrb	r3, [r7, #11]
 80007b2:	3302      	adds	r3, #2
 80007b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b8:	7a79      	ldrb	r1, [r7, #9]
 80007ba:	7abb      	ldrb	r3, [r7, #10]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	4961      	ldr	r1, [pc, #388]	; (800094c <GPIO_Init+0x2f4>)
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	4302      	orrs	r2, r0
 80007ca:	3302      	adds	r3, #2
 80007cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt management register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <GPIO_Init+0x2ec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	4a58      	ldr	r2, [pc, #352]	; (8000944 <GPIO_Init+0x2ec>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6013      	str	r3, [r2, #0]


	}
	temp = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]

	//2. Configure the speed of the GPIO pin
	//Left shifting 2 bit SPEED value for specific PIN number
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	799b      	ldrb	r3, [r3, #6]
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2103      	movs	r1, #3
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	400a      	ands	r2, r1
 8000818:	609a      	str	r2, [r3, #8]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6899      	ldr	r1, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	430a      	orrs	r2, r1
 8000828:	609a      	str	r2, [r3, #8]

	temp = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]

	//3. Configure the Pull-up Pull-down setting
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	79db      	ldrb	r3, [r3, #7]
 8000832:	461a      	mov	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	2103      	movs	r1, #3
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	4619      	mov	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	400a      	ands	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68d9      	ldr	r1, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	430a      	orrs	r2, r1
 800086c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]

	//4. Configure the Output type
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7a1b      	ldrb	r3, [r3, #8]
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	4619      	mov	r1, r3
 800088e:	2301      	movs	r3, #1
 8000890:	408b      	lsls	r3, r1
 8000892:	43db      	mvns	r3, r3
 8000894:	4619      	mov	r1, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	400a      	ands	r2, r1
 800089c:	605a      	str	r2, [r3, #4]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6859      	ldr	r1, [r3, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d13d      	bne.n	8000936 <GPIO_Init+0x2de>
	{
		uint8_t temp1;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	723b      	strb	r3, [r7, #8]
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp1) );
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a5b      	ldrb	r3, [r3, #9]
 80008c8:	461a      	mov	r2, r3
 80008ca:	7a3b      	ldrb	r3, [r7, #8]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	d816      	bhi.n	800090a <GPIO_Init+0x2b2>
			{
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp1) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6a1a      	ldr	r2, [r3, #32]
 80008e2:	7a3b      	ldrb	r3, [r7, #8]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	210f      	movs	r1, #15
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	400a      	ands	r2, r1
 80008f6:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a19      	ldr	r1, [r3, #32]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	430a      	orrs	r2, r1
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	e015      	b.n	8000936 <GPIO_Init+0x2de>
			}
			else
			{
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp1) );
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000910:	7a3b      	ldrb	r3, [r7, #8]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	210f      	movs	r1, #15
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	400a      	ands	r2, r1
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	430a      	orrs	r2, r1
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
			}
	}
	temp = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]

}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40013c00 	.word	0x40013c00
 8000948:	40023800 	.word	0x40023800
 800094c:	40013800 	.word	0x40013800

08000950 <GPIO_WriteToOPPin>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_WriteToOPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
 800095c:	4613      	mov	r3, r2
 800095e:	70bb      	strb	r3, [r7, #2]
	if (value == SET)						// SET =	1
 8000960:	78bb      	ldrb	r3, [r7, #2]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d109      	bne.n	800097a <GPIO_WriteToOPPin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	78fa      	ldrb	r2, [r7, #3]
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	615a      	str	r2, [r3, #20]
	}
	else if (value == RESET)				// RESET =	0
	{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000978:	e00c      	b.n	8000994 <GPIO_WriteToOPPin+0x44>
	else if (value == RESET)				// RESET =	0
 800097a:	78bb      	ldrb	r3, [r7, #2]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <GPIO_WriteToOPPin+0x44>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	78fa      	ldrb	r2, [r7, #3]
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	615a      	str	r2, [r3, #20]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SPI_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_PClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d120      	bne.n	80009f4 <SPI_PClkCtrl+0x54>
	{
		if (pSPIx == SPI1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <SPI_PClkCtrl+0xa0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <SPI_PClkCtrl+0x28>
		{
			SPI1_CLK_EN();
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 80009c6:	e035      	b.n	8000a34 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <SPI_PClkCtrl+0xa8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <SPI_PClkCtrl+0x3e>
			SPI2_CLK_EN();
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009dc:	e02a      	b.n	8000a34 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <SPI_PClkCtrl+0xac>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d126      	bne.n	8000a34 <SPI_PClkCtrl+0x94>
			SPI3_CLK_EN();
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f2:	e01f      	b.n	8000a34 <SPI_PClkCtrl+0x94>
		if (pSPIx == SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <SPI_PClkCtrl+0xa0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <SPI_PClkCtrl+0x6a>
			SPI1_CLK_DI();
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 8000a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a06:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a08:	e014      	b.n	8000a34 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <SPI_PClkCtrl+0xa8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <SPI_PClkCtrl+0x80>
			SPI2_CLK_DI();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 8000a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a1e:	e009      	b.n	8000a34 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SPI_PClkCtrl+0xac>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d105      	bne.n	8000a34 <SPI_PClkCtrl+0x94>
			SPI3_CLK_DI();
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SPI_PClkCtrl+0xa4>)
 8000a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	40003c00 	.word	0x40003c00

08000a50 <SPI_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	//0. Enable the Peripheral clock				(Updated on 19-Feb-2021)
	SPI_PClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff9e 	bl	80009a0 <SPI_PClkCtrl>

	uint32_t tempreg = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]

	//1. Configure the device modes
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DeviceMode) << SPI_CR1_MSTR );
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]

	//2. Configure the BUS Config
	if (pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_FULL_DUP)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	795b      	ldrb	r3, [r3, #5]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <SPI_Init+0x38>
	{
		//Use unidirectional mode, ie, Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE );
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e014      	b.n	8000ab2 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_HALF_DUP)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d104      	bne.n	8000a9a <SPI_Init+0x4a>
	{
		//Set BIDIMODE
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e00b      	b.n	8000ab2 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RX)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d107      	bne.n	8000ab2 <SPI_Init+0x62>
	{
		//Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aa8:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab0:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the Data Frame Format
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DFF) << SPI_CR1_DFF);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	799b      	ldrb	r3, [r3, #6]
 8000ab6:	02db      	lsls	r3, r3, #11
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

	//4. Configure the Clock Phase
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPHA) << SPI_CR1_CPHA);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	79db      	ldrb	r3, [r3, #7]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

	//5. Configure the Clock Polarity
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPOL) << SPI_CR1_CPOL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]

	//6. Configure Slave Select Mode
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SSM) << SPI_CR1_SSM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7a5b      	ldrb	r3, [r3, #9]
 8000ade:	025b      	lsls	r3, r3, #9
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

	//7. Configure Serial Clock Speed
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SCLKSpeed) << SPI_CR1_BR);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7a9b      	ldrb	r3, [r3, #10]
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <FlagStatus>:
		SPI3_RESET();
	}
}

uint8_t	FlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
	if ( pSPIx->SR & FlagName )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <FlagStatus+0x1a>
	{
		return FLAG_SET;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <FlagStatus+0x1c>
	}
	else
	{
		return FLAG_RESET;
 8000b20:	2300      	movs	r3, #0
	}
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SPI_DataSend>:
 * @return		-	none
 *
 * @note		- This is a blocking call
 -----------------------------------------------------------------------------------------*/
void SPI_DataSend(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLen)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000b3a:	e027      	b.n	8000b8c <SPI_DataSend+0x5e>
	{
		//1. Wait until TX buffer is empty
		while ( ( FlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) );
 8000b3c:	bf00      	nop
 8000b3e:	2102      	movs	r1, #2
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff ffe0 	bl	8000b06 <FlagStatus>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f8      	beq.n	8000b3e <SPI_DataSend+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00e      	beq.n	8000b76 <SPI_DataSend+0x48>
		{
			// 16 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen twice
			DataLen--;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			(uint16_t*)pTxBuffer++;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e00a      	b.n	8000b8c <SPI_DataSend+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *(pTxBuffer);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen
			DataLen--;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			pTxBuffer++;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1d4      	bne.n	8000b3c <SPI_DataSend+0xe>
		}
	}
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SPI_DataReceive>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_DataReceive(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLen)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000ba6:	e027      	b.n	8000bf8 <SPI_DataReceive+0x5e>
	{
		//1. Wait until Rx buffer is available
		while (FlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000ba8:	bf00      	nop
 8000baa:	2101      	movs	r1, #1
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff ffaa 	bl	8000b06 <FlagStatus>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f8      	beq.n	8000baa <SPI_DataReceive+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00e      	beq.n	8000be2 <SPI_DataReceive+0x48>
		{
			// 16 bit data format
			//1. Load the data from DR to buffer
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	801a      	strh	r2, [r3, #0]
			//2. Decrease DataLen twice
			DataLen--;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			(uint16_t*)pRxBuffer++;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	e00a      	b.n	8000bf8 <SPI_DataReceive+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data from DR to buffer
			*(pRxBuffer) = pSPIx->DR;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	701a      	strb	r2, [r3, #0]
			//2. Decrease DataLen
			DataLen--;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			pRxBuffer++;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1d4      	bne.n	8000ba8 <SPI_DataReceive+0xe>
		}
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <SPI_PCtrl>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_PCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d106      	bne.n	8000c26 <SPI_PCtrl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c24:	e005      	b.n	8000c32 <SPI_PCtrl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <__libc_init_array>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	4e0d      	ldr	r6, [pc, #52]	; (8000c78 <__libc_init_array+0x38>)
 8000c44:	4c0d      	ldr	r4, [pc, #52]	; (8000c7c <__libc_init_array+0x3c>)
 8000c46:	1ba4      	subs	r4, r4, r6
 8000c48:	10a4      	asrs	r4, r4, #2
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	42a5      	cmp	r5, r4
 8000c4e:	d109      	bne.n	8000c64 <__libc_init_array+0x24>
 8000c50:	4e0b      	ldr	r6, [pc, #44]	; (8000c80 <__libc_init_array+0x40>)
 8000c52:	4c0c      	ldr	r4, [pc, #48]	; (8000c84 <__libc_init_array+0x44>)
 8000c54:	f000 f818 	bl	8000c88 <_init>
 8000c58:	1ba4      	subs	r4, r4, r6
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d105      	bne.n	8000c6e <__libc_init_array+0x2e>
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c68:	4798      	blx	r3
 8000c6a:	3501      	adds	r5, #1
 8000c6c:	e7ee      	b.n	8000c4c <__libc_init_array+0xc>
 8000c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c72:	4798      	blx	r3
 8000c74:	3501      	adds	r5, #1
 8000c76:	e7f2      	b.n	8000c5e <__libc_init_array+0x1e>
 8000c78:	08000ca0 	.word	0x08000ca0
 8000c7c:	08000ca0 	.word	0x08000ca0
 8000c80:	08000ca0 	.word	0x08000ca0
 8000c84:	08000ca4 	.word	0x08000ca4

08000c88 <_init>:
 8000c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8a:	bf00      	nop
 8000c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8e:	bc08      	pop	{r3}
 8000c90:	469e      	mov	lr, r3
 8000c92:	4770      	bx	lr

08000c94 <_fini>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	bf00      	nop
 8000c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9a:	bc08      	pop	{r3}
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	4770      	bx	lr
