
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff0  08001ff0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ff0  08001ff0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ff0  08001ff0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  0800205c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800205c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034d1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008ea  00000000  00000000  00023565  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000280  00000000  00000000  00023e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000228  00000000  00000000  000240d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000334e  00000000  00000000  000242f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001fa7  00000000  00000000  00027646  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b322  00000000  00000000  000295ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003490f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d0  00000000  00000000  0003498c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001f0c 	.word	0x08001f0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001f0c 	.word	0x08001f0c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <delay>:
 * SPI_MISO	->	PB14
 * SPI_MOSI	->	PB15
 */

void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<=500000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0007a120 	.word	0x0007a120

080002ec <BlinkLed>:

void BlinkLed(uint8_t Read)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	210c      	movs	r1, #12
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <BlinkLed+0x48>)
 80002fc:	f000 fcf8 	bl	8000cf0 <GPIO_WriteToOPPin>
	while (Read > 0)
 8000300:	e010      	b.n	8000324 <BlinkLed+0x38>
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 8000302:	2201      	movs	r2, #1
 8000304:	210c      	movs	r1, #12
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <BlinkLed+0x48>)
 8000308:	f000 fcf2 	bl	8000cf0 <GPIO_WriteToOPPin>
		delay();
 800030c:	f7ff ffd8 	bl	80002c0 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	210c      	movs	r1, #12
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <BlinkLed+0x48>)
 8000316:	f000 fceb 	bl	8000cf0 <GPIO_WriteToOPPin>
		delay();
 800031a:	f7ff ffd1 	bl	80002c0 <delay>
		Read--;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3b01      	subs	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
	while (Read > 0)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1eb      	bne.n	8000302 <BlinkLed+0x16>
	}
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40020c00 	.word	0x40020c00

08000338 <SPI2_GPIOInits>:


/*------Function to initialize GPIO PIN as SPI PIN-------*/
void SPI2_GPIOInits(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2Pins;

	SPI2Pins.pGPIOx = GPIOB;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <SPI2_GPIOInits+0x58>)
 8000340:	607b      	str	r3, [r7, #4]
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000342:	2302      	movs	r3, #2
 8000344:	727b      	strb	r3, [r7, #9]
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFuncMode = AF5;
 8000346:	2305      	movs	r3, #5
 8000348:	737b      	strb	r3, [r7, #13]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 800034a:	2300      	movs	r3, #0
 800034c:	733b      	strb	r3, [r7, #12]
	SPI2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]
	SPI2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000352:	2302      	movs	r3, #2
 8000354:	72bb      	strb	r3, [r7, #10]

	// Enable SCLK
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000356:	230d      	movs	r3, #13
 8000358:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fb35 	bl	80009cc <GPIO_Init>

	// Enable NSS
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000362:	230c      	movs	r3, #12
 8000364:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fb2f 	bl	80009cc <GPIO_Init>

	// Enable MOSI
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800036e:	230e      	movs	r3, #14
 8000370:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fb29 	bl	80009cc <GPIO_Init>

	// Enable MISO
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800037a:	230f      	movs	r3, #15
 800037c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fb23 	bl	80009cc <GPIO_Init>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40020400 	.word	0x40020400

08000394 <GPIOButtonInit>:

void GPIOButtonInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
	//Create and Initialize the Handle structure for GPIO Button
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <GPIOButtonInit+0x2c>)
 800039c:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800039e:	2300      	movs	r3, #0
 80003a0:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003a2:	2300      	movs	r3, #0
 80003a4:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80003a6:	2302      	movs	r3, #2
 80003a8:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003aa:	2300      	movs	r3, #0
 80003ac:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOButton);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fb0b 	bl	80009cc <GPIO_Init>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020000 	.word	0x40020000

080003c4 <GPIOLedInit>:

void GPIOLedInit(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
	//Create and initialize the Handle structure for GPIO LED
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOD;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <GPIOLedInit+0x30>)
 80003cc:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80003ce:	230c      	movs	r3, #12
 80003d0:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80003d6:	2301      	movs	r3, #1
 80003d8:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 80003da:	2300      	movs	r3, #0
 80003dc:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003de:	2300      	movs	r3, #0
 80003e0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOLed);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 faf1 	bl	80009cc <GPIO_Init>
}
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40020c00 	.word	0x40020c00

080003f8 <SPI2Init>:


/*------Function to initialize SPI2 Peripheral--------*/
void SPI2Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <SPI2Init+0x38>)
 8000400:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPI_PinConfig.SPI_DeviceMode	= SPI_MODE_MASTER;
 8000402:	2301      	movs	r3, #1
 8000404:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPI_PinConfig.SPI_BusConfig	= SPI_BUS_FULL_DUP;
 8000406:	2301      	movs	r3, #1
 8000408:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPI_PinConfig.SPI_DFF		= SPI_DFF_8BIT;
 800040a:	2300      	movs	r3, #0
 800040c:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPI_PinConfig.SPI_CPHA		= SPI_CPHA_FIRST_EDGE;
 800040e:	2300      	movs	r3, #0
 8000410:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPI_PinConfig.SPI_CPOL		= SPI_CPOL_LOW;
 8000412:	2300      	movs	r3, #0
 8000414:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_PinConfig.SPI_SSM		= SPI_SSM_DI;
 8000416:	2300      	movs	r3, #0
 8000418:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_PinConfig.SPI_SCLKSpeed	= SPI_SCLK_BY_8;
 800041a:	2302      	movs	r3, #2
 800041c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 800041e:	463b      	mov	r3, r7
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fce5 	bl	8000df0 <SPI_Init>
}
 8000426:	bf00      	nop
 8000428:	3720      	adds	r7, #32
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40003800 	.word	0x40003800

08000434 <main>:


int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
	char Send[10] = "Hello";
 800043a:	4a45      	ldr	r2, [pc, #276]	; (8000550 <main+0x11c>)
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000444:	6018      	str	r0, [r3, #0]
 8000446:	3304      	adds	r3, #4
 8000448:	8019      	strh	r1, [r3, #0]
 800044a:	f107 0316 	add.w	r3, r7, #22
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
	char Rec[10];
	uint8_t SendLen = strlen(Send);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fed4 	bl	8000204 <strlen>
 800045c:	4603      	mov	r3, r0
 800045e:	b2db      	uxtb	r3, r3
 8000460:	70fb      	strb	r3, [r7, #3]
	uint8_t RecLen;

	// Initialize GPIO PIN to behave as SPI PIN
	SPI2_GPIOInits();
 8000462:	f7ff ff69 	bl	8000338 <SPI2_GPIOInits>

	// Initialize GPIO PIN for button
	GPIOButtonInit();
 8000466:	f7ff ff95 	bl	8000394 <GPIOButtonInit>

	// Initialize GPIO PIN for LED
	GPIOLedInit();
 800046a:	f7ff ffab 	bl	80003c4 <GPIOLedInit>

	// Initialize SPI peripheral parameters
	SPI2Init();
 800046e:	f7ff ffc3 	bl	80003f8 <SPI2Init>

	// Since SSM is enabled, SSI bit needs to be kept high.
	//SPI_SSIConfig(SPI2, ENABLE);
	SPI_SSOEConfig(SPI2, ENABLE);
 8000472:	2101      	movs	r1, #1
 8000474:	4837      	ldr	r0, [pc, #220]	; (8000554 <main+0x120>)
 8000476:	f000 fdb2 	bl	8000fde <SPI_SSOEConfig>

	// Enable the SPI2 peripheral
	SPI_PCtrl(SPI2, ENABLE);
 800047a:	2101      	movs	r1, #1
 800047c:	4835      	ldr	r0, [pc, #212]	; (8000554 <main+0x120>)
 800047e:	f000 fd92 	bl	8000fa6 <SPI_PCtrl>

	// Wait for the button to be pressed
	while( GPIO_ReadfromIPPin(GPIOA, GPIO_PIN_0) == RESET );
 8000482:	bf00      	nop
 8000484:	2100      	movs	r1, #0
 8000486:	4834      	ldr	r0, [pc, #208]	; (8000558 <main+0x124>)
 8000488:	f000 fc1c 	bl	8000cc4 <GPIO_ReadfromIPPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f8      	beq.n	8000484 <main+0x50>

	SPI_DataSend(SPI2, &SendLen, 1);
 8000492:	1cfb      	adds	r3, r7, #3
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	482e      	ldr	r0, [pc, #184]	; (8000554 <main+0x120>)
 800049a:	f000 fd18 	bl	8000ece <SPI_DataSend>
	SPI_DataReceive(SPI2, &RecLen, 1);
 800049e:	1cbb      	adds	r3, r7, #2
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	482b      	ldr	r0, [pc, #172]	; (8000554 <main+0x120>)
 80004a6:	f000 fd48 	bl	8000f3a <SPI_DataReceive>

	delay();
 80004aa:	f7ff ff09 	bl	80002c0 <delay>

	uint8_t MaxLen = SendLen;
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	77fb      	strb	r3, [r7, #31]
	if (MaxLen < RecLen)
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	7ffa      	ldrb	r2, [r7, #31]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d201      	bcs.n	80004be <main+0x8a>
		MaxLen = RecLen;
 80004ba:	78bb      	ldrb	r3, [r7, #2]
 80004bc:	77fb      	strb	r3, [r7, #31]
	uint8_t i = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	77bb      	strb	r3, [r7, #30]

	while(i < MaxLen)
 80004c2:	e013      	b.n	80004ec <main+0xb8>
	{
		SPI_DataSend(SPI2, &Send[i], 1);
 80004c4:	7fbb      	ldrb	r3, [r7, #30]
 80004c6:	f107 0210 	add.w	r2, r7, #16
 80004ca:	4413      	add	r3, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4820      	ldr	r0, [pc, #128]	; (8000554 <main+0x120>)
 80004d2:	f000 fcfc 	bl	8000ece <SPI_DataSend>
		SPI_DataReceive(SPI2, &Rec[i], 1);
 80004d6:	7fbb      	ldrb	r3, [r7, #30]
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	4413      	add	r3, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	481c      	ldr	r0, [pc, #112]	; (8000554 <main+0x120>)
 80004e2:	f000 fd2a 	bl	8000f3a <SPI_DataReceive>
		i++;
 80004e6:	7fbb      	ldrb	r3, [r7, #30]
 80004e8:	3301      	adds	r3, #1
 80004ea:	77bb      	strb	r3, [r7, #30]
	while(i < MaxLen)
 80004ec:	7fba      	ldrb	r2, [r7, #30]
 80004ee:	7ffb      	ldrb	r3, [r7, #31]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3e7      	bcc.n	80004c4 <main+0x90>
	}

	//Wait till SPI is busy
	while( FlagStatus(SPI2, SPI_BUSY_FLAG) );
 80004f4:	bf00      	nop
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4816      	ldr	r0, [pc, #88]	; (8000554 <main+0x120>)
 80004fa:	f000 fcd4 	bl	8000ea6 <FlagStatus>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f8      	bne.n	80004f6 <main+0xc2>

	//Disable the SPI2 peripheral
	SPI_PCtrl(SPI2, DISABLE);
 8000504:	2100      	movs	r1, #0
 8000506:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0x120>)
 8000508:	f000 fd4d 	bl	8000fa6 <SPI_PCtrl>

	BlinkLed(RecLen);
 800050c:	78bb      	ldrb	r3, [r7, #2]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff feec 	bl	80002ec <BlinkLed>
	printf("Data received\n");
 8000514:	4811      	ldr	r0, [pc, #68]	; (800055c <main+0x128>)
 8000516:	f000 fe25 	bl	8001164 <puts>
	printf("otained data : %s\n", Rec);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <main+0x12c>)
 8000520:	f000 fdac 	bl	800107c <iprintf>

	delay();
 8000524:	f7ff fecc 	bl	80002c0 <delay>
	delay();
 8000528:	f7ff feca 	bl	80002c0 <delay>


	uint8_t compare = strcmp("Hi", Rec);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x130>)
 8000532:	f7ff fe5d 	bl	80001f0 <strcmp>
 8000536:	4603      	mov	r3, r0
 8000538:	777b      	strb	r3, [r7, #29]

	if (compare == 0)
 800053a:	7f7b      	ldrb	r3, [r7, #29]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <main+0x114>
	{
		BlinkLed(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff fed3 	bl	80002ec <BlinkLed>
 8000546:	e002      	b.n	800054e <main+0x11a>
	}
	else {
		BlinkLed(0);
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fecf 	bl	80002ec <BlinkLed>
	}

	while(1);
 800054e:	e7fe      	b.n	800054e <main+0x11a>
 8000550:	08001f4c 	.word	0x08001f4c
 8000554:	40003800 	.word	0x40003800
 8000558:	40020000 	.word	0x40020000
 800055c:	08001f24 	.word	0x08001f24
 8000560:	08001f34 	.word	0x08001f34
 8000564:	08001f48 	.word	0x08001f48

08000568 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <ITM_SendChar+0x48>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <ITM_SendChar+0x48>)
 8000578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800057c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <ITM_SendChar+0x4c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <ITM_SendChar+0x4c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800058a:	bf00      	nop
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800059a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000edfc 	.word	0xe000edfc
 80005b4:	e0000e00 	.word	0xe0000e00

080005b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
	}

return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffab 	bl	8000568 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
	}
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	605a      	str	r2, [r3, #4]
	return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f000 fca8 	bl	8001018 <__errno>
 80006c8:	4602      	mov	r2, r0
 80006ca:	230c      	movs	r3, #12
 80006cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20020000 	.word	0x20020000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	20000080 	.word	0x20000080
 80006fc:	20000090 	.word	0x20000090

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 fc79 	bl	8001024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fe7f 	bl	8000434 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000744:	08001ff8 	.word	0x08001ff8
  ldr r2, =_sbss
 8000748:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800074c:	20000090 	.word	0x20000090

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <CONV_GPIOx_TO_PORTCODE>:


/* This function returns a code (0-7) for a given GPIOx peripheral */

uint8_t CONV_GPIOx_TO_PORTCODE(GPIO_RegDef_t *pGPIOx)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t portcode = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
	if (pGPIOx == GPIOA)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <CONV_GPIOx_TO_PORTCODE+0x88>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d102      	bne.n	800076e <CONV_GPIOx_TO_PORTCODE+0x1a>
	{
		portcode = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	e02f      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOB)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <CONV_GPIOx_TO_PORTCODE+0x8c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d102      	bne.n	800077c <CONV_GPIOx_TO_PORTCODE+0x28>
	{
		portcode = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e028      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOC)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <CONV_GPIOx_TO_PORTCODE+0x90>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d102      	bne.n	800078a <CONV_GPIOx_TO_PORTCODE+0x36>
	{
		portcode = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e021      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOD)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <CONV_GPIOx_TO_PORTCODE+0x94>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d102      	bne.n	8000798 <CONV_GPIOx_TO_PORTCODE+0x44>
	{
		portcode = 3;
 8000792:	2303      	movs	r3, #3
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e01a      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOE)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <CONV_GPIOx_TO_PORTCODE+0x98>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d102      	bne.n	80007a6 <CONV_GPIOx_TO_PORTCODE+0x52>
	{
		portcode = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e013      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOF)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <CONV_GPIOx_TO_PORTCODE+0x9c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d102      	bne.n	80007b4 <CONV_GPIOx_TO_PORTCODE+0x60>
	{
		portcode = 5;
 80007ae:	2305      	movs	r3, #5
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e00c      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOG)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <CONV_GPIOx_TO_PORTCODE+0xa0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d102      	bne.n	80007c2 <CONV_GPIOx_TO_PORTCODE+0x6e>
	{
		portcode = 6;
 80007bc:	2306      	movs	r3, #6
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e005      	b.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOH)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <CONV_GPIOx_TO_PORTCODE+0xa4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <CONV_GPIOx_TO_PORTCODE+0x7a>
	{
		portcode = 7;
 80007ca:	2307      	movs	r3, #7
 80007cc:	73fb      	strb	r3, [r7, #15]
	}
	return portcode;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40021400 	.word	0x40021400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40021c00 	.word	0x40021c00

080007fc <GPIO_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d162      	bne.n	80008d4 <GPIO_PClkCtrl+0xd8>
	{
		if (pGPIOx == GPIOA)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a64      	ldr	r2, [pc, #400]	; (80009a4 <GPIO_PClkCtrl+0x1a8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PClkCtrl+0x28>
		{
			GPIOA_CLK_EN();
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a63      	ldr	r2, [pc, #396]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_CLK_DI();
		}
	}

}
 8000822:	e0b9      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a61      	ldr	r2, [pc, #388]	; (80009ac <GPIO_PClkCtrl+0x1b0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PClkCtrl+0x3e>
			GPIOB_CLK_EN();
 800082c:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a5d      	ldr	r2, [pc, #372]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000838:	e0ae      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a5c      	ldr	r2, [pc, #368]	; (80009b0 <GPIO_PClkCtrl+0x1b4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PClkCtrl+0x54>
			GPIOC_CLK_EN();
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a58      	ldr	r2, [pc, #352]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084e:	e0a3      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a58      	ldr	r2, [pc, #352]	; (80009b4 <GPIO_PClkCtrl+0x1b8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <GPIO_PClkCtrl+0x6a>
			GPIOD_CLK_EN();
 8000858:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a52      	ldr	r2, [pc, #328]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000864:	e098      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a53      	ldr	r2, [pc, #332]	; (80009b8 <GPIO_PClkCtrl+0x1bc>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <GPIO_PClkCtrl+0x80>
			GPIOE_CLK_EN();
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4d      	ldr	r2, [pc, #308]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087a:	e08d      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a4f      	ldr	r2, [pc, #316]	; (80009bc <GPIO_PClkCtrl+0x1c0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <GPIO_PClkCtrl+0x96>
			GPIOF_CLK_EN();
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a47      	ldr	r2, [pc, #284]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000890:	e082      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a4a      	ldr	r2, [pc, #296]	; (80009c0 <GPIO_PClkCtrl+0x1c4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <GPIO_PClkCtrl+0xac>
			GPIOG_CLK_EN();
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a6:	e077      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <GPIO_PClkCtrl+0x1c8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <GPIO_PClkCtrl+0xc2>
			GPIOH_CLK_EN();
 80008b0:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008bc:	e06c      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <GPIO_PClkCtrl+0x1cc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d168      	bne.n	8000998 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_EN();
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d2:	e061      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		if (pGPIOx == GPIOA)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <GPIO_PClkCtrl+0x1a8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <GPIO_PClkCtrl+0xee>
			GPIOA_CLK_DI();
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e8:	e056      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <GPIO_PClkCtrl+0x1b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <GPIO_PClkCtrl+0x104>
			GPIOB_CLK_DI();
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 80008f8:	f023 0302 	bic.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008fe:	e04b      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <GPIO_PClkCtrl+0x1b4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d106      	bne.n	8000916 <GPIO_PClkCtrl+0x11a>
			GPIOC_CLK_DI();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800090e:	f023 0304 	bic.w	r3, r3, #4
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000914:	e040      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <GPIO_PClkCtrl+0x1b8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <GPIO_PClkCtrl+0x130>
			GPIOD_CLK_DI();
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000924:	f023 0308 	bic.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092a:	e035      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <GPIO_PClkCtrl+0x1bc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <GPIO_PClkCtrl+0x146>
			GPIOE_CLK_DI();
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800093a:	f023 0310 	bic.w	r3, r3, #16
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000940:	e02a      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <GPIO_PClkCtrl+0x1c0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <GPIO_PClkCtrl+0x15c>
			GPIOF_CLK_DI();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000950:	f023 0320 	bic.w	r3, r3, #32
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000956:	e01f      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <GPIO_PClkCtrl+0x1c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <GPIO_PClkCtrl+0x172>
			GPIOG_CLK_DI();
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800096c:	e014      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <GPIO_PClkCtrl+0x1c8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <GPIO_PClkCtrl+0x188>
			GPIOH_CLK_DI();
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800097c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000982:	e009      	b.n	8000998 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <GPIO_PClkCtrl+0x1cc>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d105      	bne.n	8000998 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_DI();
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <GPIO_PClkCtrl+0x1ac>)
 8000992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40021400 	.word	0x40021400
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40021c00 	.word	0x40021c00
 80009c8:	40022000 	.word	0x40022000

080009cc <GPIO_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	//0. Enable the Peripheral clock							//Updated on 19-Feb-2021
	GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff0e 	bl	80007fc <GPIO_PClkCtrl>

	uint32_t	temp = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d820      	bhi.n	8000a2e <GPIO_Init+0x62>
	{
		//If the given Pin mode <= 3, it is non-interrupt mode, else interrupt mode
		//Left shifting 2 bit MODE value for specific PIN number
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	795b      	ldrb	r3, [r3, #5]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	60fb      	str	r3, [r7, #12]

		// Clear the register values for specific pin
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
		// set the MODE register for the specific pin
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e095      	b.n	8000b5a <GPIO_Init+0x18e>
	}
	else
	{
		//The interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d117      	bne.n	8000a66 <GPIO_Init+0x9a>
		{
			//1. Configure FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a36:	4ba0      	ldr	r3, [pc, #640]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	7912      	ldrb	r2, [r2, #4]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	2201      	movs	r2, #1
 8000a42:	408a      	lsls	r2, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a9c      	ldr	r2, [pc, #624]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	60d3      	str	r3, [r2, #12]
			//Also reset the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a4c:	4b9a      	ldr	r3, [pc, #616]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7912      	ldrb	r2, [r2, #4]
 8000a54:	4611      	mov	r1, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	408a      	lsls	r2, r1
 8000a5a:	43d2      	mvns	r2, r2
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4a96      	ldr	r2, [pc, #600]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a60:	400b      	ands	r3, r1
 8000a62:	6093      	str	r3, [r2, #8]
 8000a64:	e035      	b.n	8000ad2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d117      	bne.n	8000a9e <GPIO_Init+0xd2>
		{
			//1. Configure RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6e:	4b92      	ldr	r3, [pc, #584]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7912      	ldrb	r2, [r2, #4]
 8000a76:	4611      	mov	r1, r2
 8000a78:	2201      	movs	r2, #1
 8000a7a:	408a      	lsls	r2, r1
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a8e      	ldr	r2, [pc, #568]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6093      	str	r3, [r2, #8]
			//Also reset the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a84:	4b8c      	ldr	r3, [pc, #560]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	408a      	lsls	r2, r1
 8000a92:	43d2      	mvns	r2, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a88      	ldr	r2, [pc, #544]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000a98:	400b      	ands	r3, r1
 8000a9a:	60d3      	str	r3, [r2, #12]
 8000a9c:	e019      	b.n	8000ad2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d115      	bne.n	8000ad2 <GPIO_Init+0x106>
		{
			//1. Configure FTSR and RTSR both
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa6:	4b84      	ldr	r3, [pc, #528]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	408a      	lsls	r2, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000abc:	4b7e      	ldr	r3, [pc, #504]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a7a      	ldr	r2, [pc, #488]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6093      	str	r3, [r2, #8]

		}

		//2. Configure the PORT selection in SYSCFG_EXTICR
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;			//Finds the EXTI register to be configured, each register has 4 EXTIx
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;			//Finds the position of EXTIx in the EXTI register
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	72bb      	strb	r3, [r7, #10]

		SYSCFG_CLK_EN();
 8000ae4:	4b75      	ldr	r3, [pc, #468]	; (8000cbc <GPIO_Init+0x2f0>)
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	4a74      	ldr	r2, [pc, #464]	; (8000cbc <GPIO_Init+0x2f0>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t portcode = CONV_GPIOx_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe2d 	bl	8000754 <CONV_GPIOx_TO_PORTCODE>
 8000afa:	4603      	mov	r3, r0
 8000afc:	727b      	strb	r3, [r7, #9]

		SYSCFG->EXTICR[temp1] &= ~(0xF << 4*temp2);
 8000afe:	4a70      	ldr	r2, [pc, #448]	; (8000cc0 <GPIO_Init+0x2f4>)
 8000b00:	7afb      	ldrb	r3, [r7, #11]
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b08:	7abb      	ldrb	r3, [r7, #10]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	496a      	ldr	r1, [pc, #424]	; (8000cc0 <GPIO_Init+0x2f4>)
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	4002      	ands	r2, r0
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= (portcode << 4*temp2);
 8000b22:	4a67      	ldr	r2, [pc, #412]	; (8000cc0 <GPIO_Init+0x2f4>)
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	3302      	adds	r3, #2
 8000b28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b2c:	7a79      	ldrb	r1, [r7, #9]
 8000b2e:	7abb      	ldrb	r3, [r7, #10]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	4961      	ldr	r1, [pc, #388]	; (8000cc0 <GPIO_Init+0x2f4>)
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	4302      	orrs	r2, r0
 8000b3e:	3302      	adds	r3, #2
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt management register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b44:	4b5c      	ldr	r3, [pc, #368]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	7912      	ldrb	r2, [r2, #4]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	2201      	movs	r2, #1
 8000b50:	408a      	lsls	r2, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	4a58      	ldr	r2, [pc, #352]	; (8000cb8 <GPIO_Init+0x2ec>)
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6013      	str	r3, [r2, #0]


	}
	temp = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]

	//2. Configure the speed of the GPIO pin
	//Left shifting 2 bit SPEED value for specific PIN number
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	799b      	ldrb	r3, [r3, #6]
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	609a      	str	r2, [r3, #8]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6899      	ldr	r1, [r3, #8]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]

	//3. Configure the Pull-up Pull-down setting
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	79db      	ldrb	r3, [r3, #7]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	791b      	ldrb	r3, [r3, #4]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	400a      	ands	r2, r1
 8000bd0:	60da      	str	r2, [r3, #12]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68d9      	ldr	r1, [r3, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]

	//4. Configure the Output type
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7a1b      	ldrb	r3, [r3, #8]
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	4619      	mov	r1, r3
 8000c02:	2301      	movs	r3, #1
 8000c04:	408b      	lsls	r3, r1
 8000c06:	43db      	mvns	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	400a      	ands	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6859      	ldr	r1, [r3, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d13d      	bne.n	8000caa <GPIO_Init+0x2de>
	{
		uint8_t temp1;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	723b      	strb	r3, [r7, #8]
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp1) );
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7a5b      	ldrb	r3, [r3, #9]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	7a3b      	ldrb	r3, [r7, #8]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	60fb      	str	r3, [r7, #12]
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d816      	bhi.n	8000c7e <GPIO_Init+0x2b2>
			{
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp1) );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	7a3b      	ldrb	r3, [r7, #8]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	400a      	ands	r2, r1
 8000c6a:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a19      	ldr	r1, [r3, #32]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	621a      	str	r2, [r3, #32]
 8000c7c:	e015      	b.n	8000caa <GPIO_Init+0x2de>
			}
			else
			{
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp1) );
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c84:	7a3b      	ldrb	r3, [r7, #8]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	210f      	movs	r1, #15
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	400a      	ands	r2, r1
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
			}
	}
	temp = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013c00 	.word	0x40013c00
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <GPIO_ReadfromIPPin>:
 * @return		-	returns the high or low state of the pin, 1 or 0
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
uint8_t GPIO_ReadfromIPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ( ( pGPIOx->IDR >> PinNumber ) & 0x00000001 );
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <GPIO_WriteToOPPin>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_WriteToOPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	70bb      	strb	r3, [r7, #2]
	if (value == SET)						// SET =	1
 8000d00:	78bb      	ldrb	r3, [r7, #2]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d109      	bne.n	8000d1a <GPIO_WriteToOPPin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	615a      	str	r2, [r3, #20]
	}
	else if (value == RESET)				// RESET =	0
	{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000d18:	e00c      	b.n	8000d34 <GPIO_WriteToOPPin+0x44>
	else if (value == RESET)				// RESET =	0
 8000d1a:	78bb      	ldrb	r3, [r7, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <GPIO_WriteToOPPin+0x44>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	2101      	movs	r1, #1
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	401a      	ands	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	615a      	str	r2, [r3, #20]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SPI_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_PClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d120      	bne.n	8000d94 <SPI_PClkCtrl+0x54>
	{
		if (pSPIx == SPI1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <SPI_PClkCtrl+0xa0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <SPI_PClkCtrl+0x28>
		{
			SPI1_CLK_EN();
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 8000d66:	e035      	b.n	8000dd4 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <SPI_PClkCtrl+0xa8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d106      	bne.n	8000d7e <SPI_PClkCtrl+0x3e>
			SPI2_CLK_EN();
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7c:	e02a      	b.n	8000dd4 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <SPI_PClkCtrl+0xac>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d126      	bne.n	8000dd4 <SPI_PClkCtrl+0x94>
			SPI3_CLK_EN();
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d92:	e01f      	b.n	8000dd4 <SPI_PClkCtrl+0x94>
		if (pSPIx == SPI1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <SPI_PClkCtrl+0xa0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d106      	bne.n	8000daa <SPI_PClkCtrl+0x6a>
			SPI1_CLK_DI();
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000da2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000da6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000da8:	e014      	b.n	8000dd4 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <SPI_PClkCtrl+0xa8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d106      	bne.n	8000dc0 <SPI_PClkCtrl+0x80>
			SPI2_CLK_DI();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dbe:	e009      	b.n	8000dd4 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SPI_PClkCtrl+0xac>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d105      	bne.n	8000dd4 <SPI_PClkCtrl+0x94>
			SPI3_CLK_DI();
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SPI_PClkCtrl+0xa4>)
 8000dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40003800 	.word	0x40003800
 8000dec:	40003c00 	.word	0x40003c00

08000df0 <SPI_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	//0. Enable the Peripheral clock				(Updated on 19-Feb-2021)
	SPI_PClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff9e 	bl	8000d40 <SPI_PClkCtrl>

	uint32_t tempreg = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]

	//1. Configure the device modes
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DeviceMode) << SPI_CR1_MSTR );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]

	//2. Configure the BUS Config
	if (pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_FULL_DUP)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	795b      	ldrb	r3, [r3, #5]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d104      	bne.n	8000e28 <SPI_Init+0x38>
	{
		//Use unidirectional mode, ie, Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE );
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e014      	b.n	8000e52 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_HALF_DUP)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	795b      	ldrb	r3, [r3, #5]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d104      	bne.n	8000e3a <SPI_Init+0x4a>
	{
		//Set BIDIMODE
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	e00b      	b.n	8000e52 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RX)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d107      	bne.n	8000e52 <SPI_Init+0x62>
	{
		//Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e48:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e50:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the Data Frame Format
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DFF) << SPI_CR1_DFF);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	799b      	ldrb	r3, [r3, #6]
 8000e56:	02db      	lsls	r3, r3, #11
 8000e58:	461a      	mov	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

	//4. Configure the Clock Phase
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPHA) << SPI_CR1_CPHA);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	79db      	ldrb	r3, [r3, #7]
 8000e64:	461a      	mov	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

	//5. Configure the Clock Polarity
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPOL) << SPI_CR1_CPOL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a1b      	ldrb	r3, [r3, #8]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]

	//6. Configure Slave Select Mode
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SSM) << SPI_CR1_SSM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7a5b      	ldrb	r3, [r3, #9]
 8000e7e:	025b      	lsls	r3, r3, #9
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

	//7. Configure Serial Clock Speed
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SCLKSpeed) << SPI_CR1_BR);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7a9b      	ldrb	r3, [r3, #10]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <FlagStatus>:
		SPI3_RESET();
	}
}

uint8_t	FlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	if ( pSPIx->SR & FlagName )
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <FlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <FlagStatus+0x1c>
	}
	else
	{
		return FLAG_RESET;
 8000ec0:	2300      	movs	r3, #0
	}
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SPI_DataSend>:
 * @return		-	none
 *
 * @note		- This is a blocking call
 -----------------------------------------------------------------------------------------*/
void SPI_DataSend(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLen)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000eda:	e027      	b.n	8000f2c <SPI_DataSend+0x5e>
	{
		//1. Wait until TX buffer is empty
		while ( ( FlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) );
 8000edc:	bf00      	nop
 8000ede:	2102      	movs	r1, #2
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f7ff ffe0 	bl	8000ea6 <FlagStatus>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f8      	beq.n	8000ede <SPI_DataSend+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00e      	beq.n	8000f16 <SPI_DataSend+0x48>
		{
			// 16 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen twice
			DataLen--;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			(uint16_t*)pTxBuffer++;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	e00a      	b.n	8000f2c <SPI_DataSend+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *(pTxBuffer);
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen
			DataLen--;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			pTxBuffer++;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1d4      	bne.n	8000edc <SPI_DataSend+0xe>
		}
	}
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <SPI_DataReceive>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_DataReceive(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLen)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000f46:	e027      	b.n	8000f98 <SPI_DataReceive+0x5e>
	{
		//1. Wait until Rx buffer is available
		while (FlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000f48:	bf00      	nop
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff ffaa 	bl	8000ea6 <FlagStatus>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f8      	beq.n	8000f4a <SPI_DataReceive+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <SPI_DataReceive+0x48>
		{
			// 16 bit data format
			//1. Load the data from DR to buffer
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	801a      	strh	r2, [r3, #0]
			//2. Decrease DataLen twice
			DataLen--;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			(uint16_t*)pRxBuffer++;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	e00a      	b.n	8000f98 <SPI_DataReceive+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data from DR to buffer
			*(pRxBuffer) = pSPIx->DR;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	701a      	strb	r2, [r3, #0]
			//2. Decrease DataLen
			DataLen--;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			pRxBuffer++;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1d4      	bne.n	8000f48 <SPI_DataReceive+0xe>
		}
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SPI_PCtrl>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_PCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <SPI_PCtrl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000fc4:	e005      	b.n	8000fd2 <SPI_PCtrl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SPI_SSOEConfig>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d106      	bne.n	8000ffe <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f043 0204 	orr.w	r2, r3, #4
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000ffc:	e005      	b.n	800100a <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f023 0204 	bic.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <__errno>:
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <__errno+0x8>)
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000

08001024 <__libc_init_array>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4e0d      	ldr	r6, [pc, #52]	; (800105c <__libc_init_array+0x38>)
 8001028:	4c0d      	ldr	r4, [pc, #52]	; (8001060 <__libc_init_array+0x3c>)
 800102a:	1ba4      	subs	r4, r4, r6
 800102c:	10a4      	asrs	r4, r4, #2
 800102e:	2500      	movs	r5, #0
 8001030:	42a5      	cmp	r5, r4
 8001032:	d109      	bne.n	8001048 <__libc_init_array+0x24>
 8001034:	4e0b      	ldr	r6, [pc, #44]	; (8001064 <__libc_init_array+0x40>)
 8001036:	4c0c      	ldr	r4, [pc, #48]	; (8001068 <__libc_init_array+0x44>)
 8001038:	f000 ff68 	bl	8001f0c <_init>
 800103c:	1ba4      	subs	r4, r4, r6
 800103e:	10a4      	asrs	r4, r4, #2
 8001040:	2500      	movs	r5, #0
 8001042:	42a5      	cmp	r5, r4
 8001044:	d105      	bne.n	8001052 <__libc_init_array+0x2e>
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800104c:	4798      	blx	r3
 800104e:	3501      	adds	r5, #1
 8001050:	e7ee      	b.n	8001030 <__libc_init_array+0xc>
 8001052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001056:	4798      	blx	r3
 8001058:	3501      	adds	r5, #1
 800105a:	e7f2      	b.n	8001042 <__libc_init_array+0x1e>
 800105c:	08001ff0 	.word	0x08001ff0
 8001060:	08001ff0 	.word	0x08001ff0
 8001064:	08001ff0 	.word	0x08001ff0
 8001068:	08001ff4 	.word	0x08001ff4

0800106c <memset>:
 800106c:	4402      	add	r2, r0
 800106e:	4603      	mov	r3, r0
 8001070:	4293      	cmp	r3, r2
 8001072:	d100      	bne.n	8001076 <memset+0xa>
 8001074:	4770      	bx	lr
 8001076:	f803 1b01 	strb.w	r1, [r3], #1
 800107a:	e7f9      	b.n	8001070 <memset+0x4>

0800107c <iprintf>:
 800107c:	b40f      	push	{r0, r1, r2, r3}
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <iprintf+0x2c>)
 8001080:	b513      	push	{r0, r1, r4, lr}
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	b124      	cbz	r4, 8001090 <iprintf+0x14>
 8001086:	69a3      	ldr	r3, [r4, #24]
 8001088:	b913      	cbnz	r3, 8001090 <iprintf+0x14>
 800108a:	4620      	mov	r0, r4
 800108c:	f000 fa22 	bl	80014d4 <__sinit>
 8001090:	ab05      	add	r3, sp, #20
 8001092:	9a04      	ldr	r2, [sp, #16]
 8001094:	68a1      	ldr	r1, [r4, #8]
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	4620      	mov	r0, r4
 800109a:	f000 fbdb 	bl	8001854 <_vfiprintf_r>
 800109e:	b002      	add	sp, #8
 80010a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010a4:	b004      	add	sp, #16
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <_puts_r>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	460e      	mov	r6, r1
 80010b0:	4605      	mov	r5, r0
 80010b2:	b118      	cbz	r0, 80010bc <_puts_r+0x10>
 80010b4:	6983      	ldr	r3, [r0, #24]
 80010b6:	b90b      	cbnz	r3, 80010bc <_puts_r+0x10>
 80010b8:	f000 fa0c 	bl	80014d4 <__sinit>
 80010bc:	69ab      	ldr	r3, [r5, #24]
 80010be:	68ac      	ldr	r4, [r5, #8]
 80010c0:	b913      	cbnz	r3, 80010c8 <_puts_r+0x1c>
 80010c2:	4628      	mov	r0, r5
 80010c4:	f000 fa06 	bl	80014d4 <__sinit>
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <_puts_r+0xac>)
 80010ca:	429c      	cmp	r4, r3
 80010cc:	d117      	bne.n	80010fe <_puts_r+0x52>
 80010ce:	686c      	ldr	r4, [r5, #4]
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	071b      	lsls	r3, r3, #28
 80010d4:	d51d      	bpl.n	8001112 <_puts_r+0x66>
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	b1db      	cbz	r3, 8001112 <_puts_r+0x66>
 80010da:	3e01      	subs	r6, #1
 80010dc:	68a3      	ldr	r3, [r4, #8]
 80010de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010e2:	3b01      	subs	r3, #1
 80010e4:	60a3      	str	r3, [r4, #8]
 80010e6:	b9e9      	cbnz	r1, 8001124 <_puts_r+0x78>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da2e      	bge.n	800114a <_puts_r+0x9e>
 80010ec:	4622      	mov	r2, r4
 80010ee:	210a      	movs	r1, #10
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 f83f 	bl	8001174 <__swbuf_r>
 80010f6:	3001      	adds	r0, #1
 80010f8:	d011      	beq.n	800111e <_puts_r+0x72>
 80010fa:	200a      	movs	r0, #10
 80010fc:	e011      	b.n	8001122 <_puts_r+0x76>
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <_puts_r+0xb0>)
 8001100:	429c      	cmp	r4, r3
 8001102:	d101      	bne.n	8001108 <_puts_r+0x5c>
 8001104:	68ac      	ldr	r4, [r5, #8]
 8001106:	e7e3      	b.n	80010d0 <_puts_r+0x24>
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_puts_r+0xb4>)
 800110a:	429c      	cmp	r4, r3
 800110c:	bf08      	it	eq
 800110e:	68ec      	ldreq	r4, [r5, #12]
 8001110:	e7de      	b.n	80010d0 <_puts_r+0x24>
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
 8001116:	f000 f87f 	bl	8001218 <__swsetup_r>
 800111a:	2800      	cmp	r0, #0
 800111c:	d0dd      	beq.n	80010da <_puts_r+0x2e>
 800111e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	2b00      	cmp	r3, #0
 8001126:	da04      	bge.n	8001132 <_puts_r+0x86>
 8001128:	69a2      	ldr	r2, [r4, #24]
 800112a:	429a      	cmp	r2, r3
 800112c:	dc06      	bgt.n	800113c <_puts_r+0x90>
 800112e:	290a      	cmp	r1, #10
 8001130:	d004      	beq.n	800113c <_puts_r+0x90>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	6022      	str	r2, [r4, #0]
 8001138:	7019      	strb	r1, [r3, #0]
 800113a:	e7cf      	b.n	80010dc <_puts_r+0x30>
 800113c:	4622      	mov	r2, r4
 800113e:	4628      	mov	r0, r5
 8001140:	f000 f818 	bl	8001174 <__swbuf_r>
 8001144:	3001      	adds	r0, #1
 8001146:	d1c9      	bne.n	80010dc <_puts_r+0x30>
 8001148:	e7e9      	b.n	800111e <_puts_r+0x72>
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	200a      	movs	r0, #10
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6022      	str	r2, [r4, #0]
 8001152:	7018      	strb	r0, [r3, #0]
 8001154:	e7e5      	b.n	8001122 <_puts_r+0x76>
 8001156:	bf00      	nop
 8001158:	08001f7c 	.word	0x08001f7c
 800115c:	08001f9c 	.word	0x08001f9c
 8001160:	08001f5c 	.word	0x08001f5c

08001164 <puts>:
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <puts+0xc>)
 8001166:	4601      	mov	r1, r0
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	f7ff bf9f 	b.w	80010ac <_puts_r>
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000

08001174 <__swbuf_r>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	460e      	mov	r6, r1
 8001178:	4614      	mov	r4, r2
 800117a:	4605      	mov	r5, r0
 800117c:	b118      	cbz	r0, 8001186 <__swbuf_r+0x12>
 800117e:	6983      	ldr	r3, [r0, #24]
 8001180:	b90b      	cbnz	r3, 8001186 <__swbuf_r+0x12>
 8001182:	f000 f9a7 	bl	80014d4 <__sinit>
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <__swbuf_r+0x98>)
 8001188:	429c      	cmp	r4, r3
 800118a:	d12a      	bne.n	80011e2 <__swbuf_r+0x6e>
 800118c:	686c      	ldr	r4, [r5, #4]
 800118e:	69a3      	ldr	r3, [r4, #24]
 8001190:	60a3      	str	r3, [r4, #8]
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	071a      	lsls	r2, r3, #28
 8001196:	d52e      	bpl.n	80011f6 <__swbuf_r+0x82>
 8001198:	6923      	ldr	r3, [r4, #16]
 800119a:	b363      	cbz	r3, 80011f6 <__swbuf_r+0x82>
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	1ac0      	subs	r0, r0, r3
 80011a2:	6963      	ldr	r3, [r4, #20]
 80011a4:	b2f6      	uxtb	r6, r6
 80011a6:	4283      	cmp	r3, r0
 80011a8:	4637      	mov	r7, r6
 80011aa:	dc04      	bgt.n	80011b6 <__swbuf_r+0x42>
 80011ac:	4621      	mov	r1, r4
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 f926 	bl	8001400 <_fflush_r>
 80011b4:	bb28      	cbnz	r0, 8001202 <__swbuf_r+0x8e>
 80011b6:	68a3      	ldr	r3, [r4, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60a3      	str	r3, [r4, #8]
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	6022      	str	r2, [r4, #0]
 80011c2:	701e      	strb	r6, [r3, #0]
 80011c4:	6963      	ldr	r3, [r4, #20]
 80011c6:	3001      	adds	r0, #1
 80011c8:	4283      	cmp	r3, r0
 80011ca:	d004      	beq.n	80011d6 <__swbuf_r+0x62>
 80011cc:	89a3      	ldrh	r3, [r4, #12]
 80011ce:	07db      	lsls	r3, r3, #31
 80011d0:	d519      	bpl.n	8001206 <__swbuf_r+0x92>
 80011d2:	2e0a      	cmp	r6, #10
 80011d4:	d117      	bne.n	8001206 <__swbuf_r+0x92>
 80011d6:	4621      	mov	r1, r4
 80011d8:	4628      	mov	r0, r5
 80011da:	f000 f911 	bl	8001400 <_fflush_r>
 80011de:	b190      	cbz	r0, 8001206 <__swbuf_r+0x92>
 80011e0:	e00f      	b.n	8001202 <__swbuf_r+0x8e>
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <__swbuf_r+0x9c>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d101      	bne.n	80011ec <__swbuf_r+0x78>
 80011e8:	68ac      	ldr	r4, [r5, #8]
 80011ea:	e7d0      	b.n	800118e <__swbuf_r+0x1a>
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <__swbuf_r+0xa0>)
 80011ee:	429c      	cmp	r4, r3
 80011f0:	bf08      	it	eq
 80011f2:	68ec      	ldreq	r4, [r5, #12]
 80011f4:	e7cb      	b.n	800118e <__swbuf_r+0x1a>
 80011f6:	4621      	mov	r1, r4
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 f80d 	bl	8001218 <__swsetup_r>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0cc      	beq.n	800119c <__swbuf_r+0x28>
 8001202:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001206:	4638      	mov	r0, r7
 8001208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800120a:	bf00      	nop
 800120c:	08001f7c 	.word	0x08001f7c
 8001210:	08001f9c 	.word	0x08001f9c
 8001214:	08001f5c 	.word	0x08001f5c

08001218 <__swsetup_r>:
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <__swsetup_r+0xcc>)
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	681d      	ldr	r5, [r3, #0]
 800121e:	4606      	mov	r6, r0
 8001220:	460c      	mov	r4, r1
 8001222:	b125      	cbz	r5, 800122e <__swsetup_r+0x16>
 8001224:	69ab      	ldr	r3, [r5, #24]
 8001226:	b913      	cbnz	r3, 800122e <__swsetup_r+0x16>
 8001228:	4628      	mov	r0, r5
 800122a:	f000 f953 	bl	80014d4 <__sinit>
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <__swsetup_r+0xd0>)
 8001230:	429c      	cmp	r4, r3
 8001232:	d10f      	bne.n	8001254 <__swsetup_r+0x3c>
 8001234:	686c      	ldr	r4, [r5, #4]
 8001236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800123a:	b29a      	uxth	r2, r3
 800123c:	0715      	lsls	r5, r2, #28
 800123e:	d42c      	bmi.n	800129a <__swsetup_r+0x82>
 8001240:	06d0      	lsls	r0, r2, #27
 8001242:	d411      	bmi.n	8001268 <__swsetup_r+0x50>
 8001244:	2209      	movs	r2, #9
 8001246:	6032      	str	r2, [r6, #0]
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001252:	e03e      	b.n	80012d2 <__swsetup_r+0xba>
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <__swsetup_r+0xd4>)
 8001256:	429c      	cmp	r4, r3
 8001258:	d101      	bne.n	800125e <__swsetup_r+0x46>
 800125a:	68ac      	ldr	r4, [r5, #8]
 800125c:	e7eb      	b.n	8001236 <__swsetup_r+0x1e>
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <__swsetup_r+0xd8>)
 8001260:	429c      	cmp	r4, r3
 8001262:	bf08      	it	eq
 8001264:	68ec      	ldreq	r4, [r5, #12]
 8001266:	e7e6      	b.n	8001236 <__swsetup_r+0x1e>
 8001268:	0751      	lsls	r1, r2, #29
 800126a:	d512      	bpl.n	8001292 <__swsetup_r+0x7a>
 800126c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800126e:	b141      	cbz	r1, 8001282 <__swsetup_r+0x6a>
 8001270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001274:	4299      	cmp	r1, r3
 8001276:	d002      	beq.n	800127e <__swsetup_r+0x66>
 8001278:	4630      	mov	r0, r6
 800127a:	f000 fa19 	bl	80016b0 <_free_r>
 800127e:	2300      	movs	r3, #0
 8001280:	6363      	str	r3, [r4, #52]	; 0x34
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	2300      	movs	r3, #0
 800128c:	6063      	str	r3, [r4, #4]
 800128e:	6923      	ldr	r3, [r4, #16]
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	b94b      	cbnz	r3, 80012b2 <__swsetup_r+0x9a>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a8:	d003      	beq.n	80012b2 <__swsetup_r+0x9a>
 80012aa:	4621      	mov	r1, r4
 80012ac:	4630      	mov	r0, r6
 80012ae:	f000 f9bf 	bl	8001630 <__smakebuf_r>
 80012b2:	89a2      	ldrh	r2, [r4, #12]
 80012b4:	f012 0301 	ands.w	r3, r2, #1
 80012b8:	d00c      	beq.n	80012d4 <__swsetup_r+0xbc>
 80012ba:	2300      	movs	r3, #0
 80012bc:	60a3      	str	r3, [r4, #8]
 80012be:	6963      	ldr	r3, [r4, #20]
 80012c0:	425b      	negs	r3, r3
 80012c2:	61a3      	str	r3, [r4, #24]
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	b953      	cbnz	r3, 80012de <__swsetup_r+0xc6>
 80012c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012d0:	d1ba      	bne.n	8001248 <__swsetup_r+0x30>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	0792      	lsls	r2, r2, #30
 80012d6:	bf58      	it	pl
 80012d8:	6963      	ldrpl	r3, [r4, #20]
 80012da:	60a3      	str	r3, [r4, #8]
 80012dc:	e7f2      	b.n	80012c4 <__swsetup_r+0xac>
 80012de:	2000      	movs	r0, #0
 80012e0:	e7f7      	b.n	80012d2 <__swsetup_r+0xba>
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	08001f7c 	.word	0x08001f7c
 80012ec:	08001f9c 	.word	0x08001f9c
 80012f0:	08001f5c 	.word	0x08001f5c

080012f4 <__sflush_r>:
 80012f4:	898a      	ldrh	r2, [r1, #12]
 80012f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012fa:	4605      	mov	r5, r0
 80012fc:	0710      	lsls	r0, r2, #28
 80012fe:	460c      	mov	r4, r1
 8001300:	d458      	bmi.n	80013b4 <__sflush_r+0xc0>
 8001302:	684b      	ldr	r3, [r1, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc05      	bgt.n	8001314 <__sflush_r+0x20>
 8001308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc02      	bgt.n	8001314 <__sflush_r+0x20>
 800130e:	2000      	movs	r0, #0
 8001310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001316:	2e00      	cmp	r6, #0
 8001318:	d0f9      	beq.n	800130e <__sflush_r+0x1a>
 800131a:	2300      	movs	r3, #0
 800131c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001320:	682f      	ldr	r7, [r5, #0]
 8001322:	6a21      	ldr	r1, [r4, #32]
 8001324:	602b      	str	r3, [r5, #0]
 8001326:	d032      	beq.n	800138e <__sflush_r+0x9a>
 8001328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	075a      	lsls	r2, r3, #29
 800132e:	d505      	bpl.n	800133c <__sflush_r+0x48>
 8001330:	6863      	ldr	r3, [r4, #4]
 8001332:	1ac0      	subs	r0, r0, r3
 8001334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001336:	b10b      	cbz	r3, 800133c <__sflush_r+0x48>
 8001338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800133a:	1ac0      	subs	r0, r0, r3
 800133c:	2300      	movs	r3, #0
 800133e:	4602      	mov	r2, r0
 8001340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001342:	6a21      	ldr	r1, [r4, #32]
 8001344:	4628      	mov	r0, r5
 8001346:	47b0      	blx	r6
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	d106      	bne.n	800135c <__sflush_r+0x68>
 800134e:	6829      	ldr	r1, [r5, #0]
 8001350:	291d      	cmp	r1, #29
 8001352:	d848      	bhi.n	80013e6 <__sflush_r+0xf2>
 8001354:	4a29      	ldr	r2, [pc, #164]	; (80013fc <__sflush_r+0x108>)
 8001356:	40ca      	lsrs	r2, r1
 8001358:	07d6      	lsls	r6, r2, #31
 800135a:	d544      	bpl.n	80013e6 <__sflush_r+0xf2>
 800135c:	2200      	movs	r2, #0
 800135e:	6062      	str	r2, [r4, #4]
 8001360:	04d9      	lsls	r1, r3, #19
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	6022      	str	r2, [r4, #0]
 8001366:	d504      	bpl.n	8001372 <__sflush_r+0x7e>
 8001368:	1c42      	adds	r2, r0, #1
 800136a:	d101      	bne.n	8001370 <__sflush_r+0x7c>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	b903      	cbnz	r3, 8001372 <__sflush_r+0x7e>
 8001370:	6560      	str	r0, [r4, #84]	; 0x54
 8001372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001374:	602f      	str	r7, [r5, #0]
 8001376:	2900      	cmp	r1, #0
 8001378:	d0c9      	beq.n	800130e <__sflush_r+0x1a>
 800137a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800137e:	4299      	cmp	r1, r3
 8001380:	d002      	beq.n	8001388 <__sflush_r+0x94>
 8001382:	4628      	mov	r0, r5
 8001384:	f000 f994 	bl	80016b0 <_free_r>
 8001388:	2000      	movs	r0, #0
 800138a:	6360      	str	r0, [r4, #52]	; 0x34
 800138c:	e7c0      	b.n	8001310 <__sflush_r+0x1c>
 800138e:	2301      	movs	r3, #1
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	1c41      	adds	r1, r0, #1
 8001396:	d1c8      	bne.n	800132a <__sflush_r+0x36>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0c5      	beq.n	800132a <__sflush_r+0x36>
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	d001      	beq.n	80013a6 <__sflush_r+0xb2>
 80013a2:	2b16      	cmp	r3, #22
 80013a4:	d101      	bne.n	80013aa <__sflush_r+0xb6>
 80013a6:	602f      	str	r7, [r5, #0]
 80013a8:	e7b1      	b.n	800130e <__sflush_r+0x1a>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	e7ad      	b.n	8001310 <__sflush_r+0x1c>
 80013b4:	690f      	ldr	r7, [r1, #16]
 80013b6:	2f00      	cmp	r7, #0
 80013b8:	d0a9      	beq.n	800130e <__sflush_r+0x1a>
 80013ba:	0793      	lsls	r3, r2, #30
 80013bc:	680e      	ldr	r6, [r1, #0]
 80013be:	bf08      	it	eq
 80013c0:	694b      	ldreq	r3, [r1, #20]
 80013c2:	600f      	str	r7, [r1, #0]
 80013c4:	bf18      	it	ne
 80013c6:	2300      	movne	r3, #0
 80013c8:	eba6 0807 	sub.w	r8, r6, r7
 80013cc:	608b      	str	r3, [r1, #8]
 80013ce:	f1b8 0f00 	cmp.w	r8, #0
 80013d2:	dd9c      	ble.n	800130e <__sflush_r+0x1a>
 80013d4:	4643      	mov	r3, r8
 80013d6:	463a      	mov	r2, r7
 80013d8:	6a21      	ldr	r1, [r4, #32]
 80013da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013dc:	4628      	mov	r0, r5
 80013de:	47b0      	blx	r6
 80013e0:	2800      	cmp	r0, #0
 80013e2:	dc06      	bgt.n	80013f2 <__sflush_r+0xfe>
 80013e4:	89a3      	ldrh	r3, [r4, #12]
 80013e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ea:	81a3      	strh	r3, [r4, #12]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f0:	e78e      	b.n	8001310 <__sflush_r+0x1c>
 80013f2:	4407      	add	r7, r0
 80013f4:	eba8 0800 	sub.w	r8, r8, r0
 80013f8:	e7e9      	b.n	80013ce <__sflush_r+0xda>
 80013fa:	bf00      	nop
 80013fc:	20400001 	.word	0x20400001

08001400 <_fflush_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	690b      	ldr	r3, [r1, #16]
 8001404:	4605      	mov	r5, r0
 8001406:	460c      	mov	r4, r1
 8001408:	b1db      	cbz	r3, 8001442 <_fflush_r+0x42>
 800140a:	b118      	cbz	r0, 8001414 <_fflush_r+0x14>
 800140c:	6983      	ldr	r3, [r0, #24]
 800140e:	b90b      	cbnz	r3, 8001414 <_fflush_r+0x14>
 8001410:	f000 f860 	bl	80014d4 <__sinit>
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <_fflush_r+0x48>)
 8001416:	429c      	cmp	r4, r3
 8001418:	d109      	bne.n	800142e <_fflush_r+0x2e>
 800141a:	686c      	ldr	r4, [r5, #4]
 800141c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001420:	b17b      	cbz	r3, 8001442 <_fflush_r+0x42>
 8001422:	4621      	mov	r1, r4
 8001424:	4628      	mov	r0, r5
 8001426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800142a:	f7ff bf63 	b.w	80012f4 <__sflush_r>
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_fflush_r+0x4c>)
 8001430:	429c      	cmp	r4, r3
 8001432:	d101      	bne.n	8001438 <_fflush_r+0x38>
 8001434:	68ac      	ldr	r4, [r5, #8]
 8001436:	e7f1      	b.n	800141c <_fflush_r+0x1c>
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <_fflush_r+0x50>)
 800143a:	429c      	cmp	r4, r3
 800143c:	bf08      	it	eq
 800143e:	68ec      	ldreq	r4, [r5, #12]
 8001440:	e7ec      	b.n	800141c <_fflush_r+0x1c>
 8001442:	2000      	movs	r0, #0
 8001444:	bd38      	pop	{r3, r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	08001f7c 	.word	0x08001f7c
 800144c:	08001f9c 	.word	0x08001f9c
 8001450:	08001f5c 	.word	0x08001f5c

08001454 <std>:
 8001454:	2300      	movs	r3, #0
 8001456:	b510      	push	{r4, lr}
 8001458:	4604      	mov	r4, r0
 800145a:	e9c0 3300 	strd	r3, r3, [r0]
 800145e:	6083      	str	r3, [r0, #8]
 8001460:	8181      	strh	r1, [r0, #12]
 8001462:	6643      	str	r3, [r0, #100]	; 0x64
 8001464:	81c2      	strh	r2, [r0, #14]
 8001466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800146a:	6183      	str	r3, [r0, #24]
 800146c:	4619      	mov	r1, r3
 800146e:	2208      	movs	r2, #8
 8001470:	305c      	adds	r0, #92	; 0x5c
 8001472:	f7ff fdfb 	bl	800106c <memset>
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <std+0x38>)
 8001478:	6263      	str	r3, [r4, #36]	; 0x24
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <std+0x3c>)
 800147c:	62a3      	str	r3, [r4, #40]	; 0x28
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <std+0x40>)
 8001480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <std+0x44>)
 8001484:	6224      	str	r4, [r4, #32]
 8001486:	6323      	str	r3, [r4, #48]	; 0x30
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	08001db1 	.word	0x08001db1
 8001490:	08001dd3 	.word	0x08001dd3
 8001494:	08001e0b 	.word	0x08001e0b
 8001498:	08001e2f 	.word	0x08001e2f

0800149c <_cleanup_r>:
 800149c:	4901      	ldr	r1, [pc, #4]	; (80014a4 <_cleanup_r+0x8>)
 800149e:	f000 b885 	b.w	80015ac <_fwalk_reent>
 80014a2:	bf00      	nop
 80014a4:	08001401 	.word	0x08001401

080014a8 <__sfmoreglue>:
 80014a8:	b570      	push	{r4, r5, r6, lr}
 80014aa:	1e4a      	subs	r2, r1, #1
 80014ac:	2568      	movs	r5, #104	; 0x68
 80014ae:	4355      	muls	r5, r2
 80014b0:	460e      	mov	r6, r1
 80014b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014b6:	f000 f949 	bl	800174c <_malloc_r>
 80014ba:	4604      	mov	r4, r0
 80014bc:	b140      	cbz	r0, 80014d0 <__sfmoreglue+0x28>
 80014be:	2100      	movs	r1, #0
 80014c0:	e9c0 1600 	strd	r1, r6, [r0]
 80014c4:	300c      	adds	r0, #12
 80014c6:	60a0      	str	r0, [r4, #8]
 80014c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014cc:	f7ff fdce 	bl	800106c <memset>
 80014d0:	4620      	mov	r0, r4
 80014d2:	bd70      	pop	{r4, r5, r6, pc}

080014d4 <__sinit>:
 80014d4:	6983      	ldr	r3, [r0, #24]
 80014d6:	b510      	push	{r4, lr}
 80014d8:	4604      	mov	r4, r0
 80014da:	bb33      	cbnz	r3, 800152a <__sinit+0x56>
 80014dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014e0:	6503      	str	r3, [r0, #80]	; 0x50
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <__sinit+0x58>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <__sinit+0x5c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6282      	str	r2, [r0, #40]	; 0x28
 80014ea:	4298      	cmp	r0, r3
 80014ec:	bf04      	itt	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	6183      	streq	r3, [r0, #24]
 80014f2:	f000 f81f 	bl	8001534 <__sfp>
 80014f6:	6060      	str	r0, [r4, #4]
 80014f8:	4620      	mov	r0, r4
 80014fa:	f000 f81b 	bl	8001534 <__sfp>
 80014fe:	60a0      	str	r0, [r4, #8]
 8001500:	4620      	mov	r0, r4
 8001502:	f000 f817 	bl	8001534 <__sfp>
 8001506:	2200      	movs	r2, #0
 8001508:	60e0      	str	r0, [r4, #12]
 800150a:	2104      	movs	r1, #4
 800150c:	6860      	ldr	r0, [r4, #4]
 800150e:	f7ff ffa1 	bl	8001454 <std>
 8001512:	2201      	movs	r2, #1
 8001514:	2109      	movs	r1, #9
 8001516:	68a0      	ldr	r0, [r4, #8]
 8001518:	f7ff ff9c 	bl	8001454 <std>
 800151c:	2202      	movs	r2, #2
 800151e:	2112      	movs	r1, #18
 8001520:	68e0      	ldr	r0, [r4, #12]
 8001522:	f7ff ff97 	bl	8001454 <std>
 8001526:	2301      	movs	r3, #1
 8001528:	61a3      	str	r3, [r4, #24]
 800152a:	bd10      	pop	{r4, pc}
 800152c:	08001f58 	.word	0x08001f58
 8001530:	0800149d 	.word	0x0800149d

08001534 <__sfp>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <__sfp+0x70>)
 8001538:	681e      	ldr	r6, [r3, #0]
 800153a:	69b3      	ldr	r3, [r6, #24]
 800153c:	4607      	mov	r7, r0
 800153e:	b913      	cbnz	r3, 8001546 <__sfp+0x12>
 8001540:	4630      	mov	r0, r6
 8001542:	f7ff ffc7 	bl	80014d4 <__sinit>
 8001546:	3648      	adds	r6, #72	; 0x48
 8001548:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800154c:	3b01      	subs	r3, #1
 800154e:	d503      	bpl.n	8001558 <__sfp+0x24>
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	b133      	cbz	r3, 8001562 <__sfp+0x2e>
 8001554:	6836      	ldr	r6, [r6, #0]
 8001556:	e7f7      	b.n	8001548 <__sfp+0x14>
 8001558:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800155c:	b16d      	cbz	r5, 800157a <__sfp+0x46>
 800155e:	3468      	adds	r4, #104	; 0x68
 8001560:	e7f4      	b.n	800154c <__sfp+0x18>
 8001562:	2104      	movs	r1, #4
 8001564:	4638      	mov	r0, r7
 8001566:	f7ff ff9f 	bl	80014a8 <__sfmoreglue>
 800156a:	6030      	str	r0, [r6, #0]
 800156c:	2800      	cmp	r0, #0
 800156e:	d1f1      	bne.n	8001554 <__sfp+0x20>
 8001570:	230c      	movs	r3, #12
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4604      	mov	r4, r0
 8001576:	4620      	mov	r0, r4
 8001578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <__sfp+0x74>)
 800157c:	6665      	str	r5, [r4, #100]	; 0x64
 800157e:	e9c4 5500 	strd	r5, r5, [r4]
 8001582:	60a5      	str	r5, [r4, #8]
 8001584:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001588:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800158c:	2208      	movs	r2, #8
 800158e:	4629      	mov	r1, r5
 8001590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001594:	f7ff fd6a 	bl	800106c <memset>
 8001598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800159c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015a0:	e7e9      	b.n	8001576 <__sfp+0x42>
 80015a2:	bf00      	nop
 80015a4:	08001f58 	.word	0x08001f58
 80015a8:	ffff0001 	.word	0xffff0001

080015ac <_fwalk_reent>:
 80015ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015b0:	4680      	mov	r8, r0
 80015b2:	4689      	mov	r9, r1
 80015b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015b8:	2600      	movs	r6, #0
 80015ba:	b914      	cbnz	r4, 80015c2 <_fwalk_reent+0x16>
 80015bc:	4630      	mov	r0, r6
 80015be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015c6:	3f01      	subs	r7, #1
 80015c8:	d501      	bpl.n	80015ce <_fwalk_reent+0x22>
 80015ca:	6824      	ldr	r4, [r4, #0]
 80015cc:	e7f5      	b.n	80015ba <_fwalk_reent+0xe>
 80015ce:	89ab      	ldrh	r3, [r5, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d907      	bls.n	80015e4 <_fwalk_reent+0x38>
 80015d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015d8:	3301      	adds	r3, #1
 80015da:	d003      	beq.n	80015e4 <_fwalk_reent+0x38>
 80015dc:	4629      	mov	r1, r5
 80015de:	4640      	mov	r0, r8
 80015e0:	47c8      	blx	r9
 80015e2:	4306      	orrs	r6, r0
 80015e4:	3568      	adds	r5, #104	; 0x68
 80015e6:	e7ee      	b.n	80015c6 <_fwalk_reent+0x1a>

080015e8 <__swhatbuf_r>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	460e      	mov	r6, r1
 80015ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f0:	2900      	cmp	r1, #0
 80015f2:	b096      	sub	sp, #88	; 0x58
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	da07      	bge.n	800160a <__swhatbuf_r+0x22>
 80015fa:	2300      	movs	r3, #0
 80015fc:	602b      	str	r3, [r5, #0]
 80015fe:	89b3      	ldrh	r3, [r6, #12]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	d410      	bmi.n	8001626 <__swhatbuf_r+0x3e>
 8001604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001608:	e00e      	b.n	8001628 <__swhatbuf_r+0x40>
 800160a:	466a      	mov	r2, sp
 800160c:	f000 fc36 	bl	8001e7c <_fstat_r>
 8001610:	2800      	cmp	r0, #0
 8001612:	dbf2      	blt.n	80015fa <__swhatbuf_r+0x12>
 8001614:	9a01      	ldr	r2, [sp, #4]
 8001616:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800161a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800161e:	425a      	negs	r2, r3
 8001620:	415a      	adcs	r2, r3
 8001622:	602a      	str	r2, [r5, #0]
 8001624:	e7ee      	b.n	8001604 <__swhatbuf_r+0x1c>
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	2000      	movs	r0, #0
 800162a:	6023      	str	r3, [r4, #0]
 800162c:	b016      	add	sp, #88	; 0x58
 800162e:	bd70      	pop	{r4, r5, r6, pc}

08001630 <__smakebuf_r>:
 8001630:	898b      	ldrh	r3, [r1, #12]
 8001632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001634:	079d      	lsls	r5, r3, #30
 8001636:	4606      	mov	r6, r0
 8001638:	460c      	mov	r4, r1
 800163a:	d507      	bpl.n	800164c <__smakebuf_r+0x1c>
 800163c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001640:	6023      	str	r3, [r4, #0]
 8001642:	6123      	str	r3, [r4, #16]
 8001644:	2301      	movs	r3, #1
 8001646:	6163      	str	r3, [r4, #20]
 8001648:	b002      	add	sp, #8
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	ab01      	add	r3, sp, #4
 800164e:	466a      	mov	r2, sp
 8001650:	f7ff ffca 	bl	80015e8 <__swhatbuf_r>
 8001654:	9900      	ldr	r1, [sp, #0]
 8001656:	4605      	mov	r5, r0
 8001658:	4630      	mov	r0, r6
 800165a:	f000 f877 	bl	800174c <_malloc_r>
 800165e:	b948      	cbnz	r0, 8001674 <__smakebuf_r+0x44>
 8001660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001664:	059a      	lsls	r2, r3, #22
 8001666:	d4ef      	bmi.n	8001648 <__smakebuf_r+0x18>
 8001668:	f023 0303 	bic.w	r3, r3, #3
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	81a3      	strh	r3, [r4, #12]
 8001672:	e7e3      	b.n	800163c <__smakebuf_r+0xc>
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <__smakebuf_r+0x7c>)
 8001676:	62b3      	str	r3, [r6, #40]	; 0x28
 8001678:	89a3      	ldrh	r3, [r4, #12]
 800167a:	6020      	str	r0, [r4, #0]
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	81a3      	strh	r3, [r4, #12]
 8001682:	9b00      	ldr	r3, [sp, #0]
 8001684:	6163      	str	r3, [r4, #20]
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	6120      	str	r0, [r4, #16]
 800168a:	b15b      	cbz	r3, 80016a4 <__smakebuf_r+0x74>
 800168c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001690:	4630      	mov	r0, r6
 8001692:	f000 fc05 	bl	8001ea0 <_isatty_r>
 8001696:	b128      	cbz	r0, 80016a4 <__smakebuf_r+0x74>
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	89a3      	ldrh	r3, [r4, #12]
 80016a6:	431d      	orrs	r5, r3
 80016a8:	81a5      	strh	r5, [r4, #12]
 80016aa:	e7cd      	b.n	8001648 <__smakebuf_r+0x18>
 80016ac:	0800149d 	.word	0x0800149d

080016b0 <_free_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4605      	mov	r5, r0
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d045      	beq.n	8001744 <_free_r+0x94>
 80016b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016bc:	1f0c      	subs	r4, r1, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	18e4      	addlt	r4, r4, r3
 80016c4:	f000 fc0e 	bl	8001ee4 <__malloc_lock>
 80016c8:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <_free_r+0x98>)
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	4610      	mov	r0, r2
 80016ce:	b933      	cbnz	r3, 80016de <_free_r+0x2e>
 80016d0:	6063      	str	r3, [r4, #4]
 80016d2:	6014      	str	r4, [r2, #0]
 80016d4:	4628      	mov	r0, r5
 80016d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016da:	f000 bc04 	b.w	8001ee6 <__malloc_unlock>
 80016de:	42a3      	cmp	r3, r4
 80016e0:	d90c      	bls.n	80016fc <_free_r+0x4c>
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	1862      	adds	r2, r4, r1
 80016e6:	4293      	cmp	r3, r2
 80016e8:	bf04      	itt	eq
 80016ea:	681a      	ldreq	r2, [r3, #0]
 80016ec:	685b      	ldreq	r3, [r3, #4]
 80016ee:	6063      	str	r3, [r4, #4]
 80016f0:	bf04      	itt	eq
 80016f2:	1852      	addeq	r2, r2, r1
 80016f4:	6022      	streq	r2, [r4, #0]
 80016f6:	6004      	str	r4, [r0, #0]
 80016f8:	e7ec      	b.n	80016d4 <_free_r+0x24>
 80016fa:	4613      	mov	r3, r2
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	b10a      	cbz	r2, 8001704 <_free_r+0x54>
 8001700:	42a2      	cmp	r2, r4
 8001702:	d9fa      	bls.n	80016fa <_free_r+0x4a>
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	1858      	adds	r0, r3, r1
 8001708:	42a0      	cmp	r0, r4
 800170a:	d10b      	bne.n	8001724 <_free_r+0x74>
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	4401      	add	r1, r0
 8001710:	1858      	adds	r0, r3, r1
 8001712:	4282      	cmp	r2, r0
 8001714:	6019      	str	r1, [r3, #0]
 8001716:	d1dd      	bne.n	80016d4 <_free_r+0x24>
 8001718:	6810      	ldr	r0, [r2, #0]
 800171a:	6852      	ldr	r2, [r2, #4]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	4401      	add	r1, r0
 8001720:	6019      	str	r1, [r3, #0]
 8001722:	e7d7      	b.n	80016d4 <_free_r+0x24>
 8001724:	d902      	bls.n	800172c <_free_r+0x7c>
 8001726:	230c      	movs	r3, #12
 8001728:	602b      	str	r3, [r5, #0]
 800172a:	e7d3      	b.n	80016d4 <_free_r+0x24>
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	1821      	adds	r1, r4, r0
 8001730:	428a      	cmp	r2, r1
 8001732:	bf04      	itt	eq
 8001734:	6811      	ldreq	r1, [r2, #0]
 8001736:	6852      	ldreq	r2, [r2, #4]
 8001738:	6062      	str	r2, [r4, #4]
 800173a:	bf04      	itt	eq
 800173c:	1809      	addeq	r1, r1, r0
 800173e:	6021      	streq	r1, [r4, #0]
 8001740:	605c      	str	r4, [r3, #4]
 8001742:	e7c7      	b.n	80016d4 <_free_r+0x24>
 8001744:	bd38      	pop	{r3, r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	20000084 	.word	0x20000084

0800174c <_malloc_r>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	1ccd      	adds	r5, r1, #3
 8001750:	f025 0503 	bic.w	r5, r5, #3
 8001754:	3508      	adds	r5, #8
 8001756:	2d0c      	cmp	r5, #12
 8001758:	bf38      	it	cc
 800175a:	250c      	movcc	r5, #12
 800175c:	2d00      	cmp	r5, #0
 800175e:	4606      	mov	r6, r0
 8001760:	db01      	blt.n	8001766 <_malloc_r+0x1a>
 8001762:	42a9      	cmp	r1, r5
 8001764:	d903      	bls.n	800176e <_malloc_r+0x22>
 8001766:	230c      	movs	r3, #12
 8001768:	6033      	str	r3, [r6, #0]
 800176a:	2000      	movs	r0, #0
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	f000 fbb9 	bl	8001ee4 <__malloc_lock>
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <_malloc_r+0xac>)
 8001774:	6814      	ldr	r4, [r2, #0]
 8001776:	4621      	mov	r1, r4
 8001778:	b991      	cbnz	r1, 80017a0 <_malloc_r+0x54>
 800177a:	4c20      	ldr	r4, [pc, #128]	; (80017fc <_malloc_r+0xb0>)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	b91b      	cbnz	r3, 8001788 <_malloc_r+0x3c>
 8001780:	4630      	mov	r0, r6
 8001782:	f000 fb05 	bl	8001d90 <_sbrk_r>
 8001786:	6020      	str	r0, [r4, #0]
 8001788:	4629      	mov	r1, r5
 800178a:	4630      	mov	r0, r6
 800178c:	f000 fb00 	bl	8001d90 <_sbrk_r>
 8001790:	1c43      	adds	r3, r0, #1
 8001792:	d124      	bne.n	80017de <_malloc_r+0x92>
 8001794:	230c      	movs	r3, #12
 8001796:	6033      	str	r3, [r6, #0]
 8001798:	4630      	mov	r0, r6
 800179a:	f000 fba4 	bl	8001ee6 <__malloc_unlock>
 800179e:	e7e4      	b.n	800176a <_malloc_r+0x1e>
 80017a0:	680b      	ldr	r3, [r1, #0]
 80017a2:	1b5b      	subs	r3, r3, r5
 80017a4:	d418      	bmi.n	80017d8 <_malloc_r+0x8c>
 80017a6:	2b0b      	cmp	r3, #11
 80017a8:	d90f      	bls.n	80017ca <_malloc_r+0x7e>
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	50cd      	str	r5, [r1, r3]
 80017ae:	18cc      	adds	r4, r1, r3
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 fb98 	bl	8001ee6 <__malloc_unlock>
 80017b6:	f104 000b 	add.w	r0, r4, #11
 80017ba:	1d23      	adds	r3, r4, #4
 80017bc:	f020 0007 	bic.w	r0, r0, #7
 80017c0:	1ac3      	subs	r3, r0, r3
 80017c2:	d0d3      	beq.n	800176c <_malloc_r+0x20>
 80017c4:	425a      	negs	r2, r3
 80017c6:	50e2      	str	r2, [r4, r3]
 80017c8:	e7d0      	b.n	800176c <_malloc_r+0x20>
 80017ca:	428c      	cmp	r4, r1
 80017cc:	684b      	ldr	r3, [r1, #4]
 80017ce:	bf16      	itet	ne
 80017d0:	6063      	strne	r3, [r4, #4]
 80017d2:	6013      	streq	r3, [r2, #0]
 80017d4:	460c      	movne	r4, r1
 80017d6:	e7eb      	b.n	80017b0 <_malloc_r+0x64>
 80017d8:	460c      	mov	r4, r1
 80017da:	6849      	ldr	r1, [r1, #4]
 80017dc:	e7cc      	b.n	8001778 <_malloc_r+0x2c>
 80017de:	1cc4      	adds	r4, r0, #3
 80017e0:	f024 0403 	bic.w	r4, r4, #3
 80017e4:	42a0      	cmp	r0, r4
 80017e6:	d005      	beq.n	80017f4 <_malloc_r+0xa8>
 80017e8:	1a21      	subs	r1, r4, r0
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 fad0 	bl	8001d90 <_sbrk_r>
 80017f0:	3001      	adds	r0, #1
 80017f2:	d0cf      	beq.n	8001794 <_malloc_r+0x48>
 80017f4:	6025      	str	r5, [r4, #0]
 80017f6:	e7db      	b.n	80017b0 <_malloc_r+0x64>
 80017f8:	20000084 	.word	0x20000084
 80017fc:	20000088 	.word	0x20000088

08001800 <__sfputc_r>:
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	3b01      	subs	r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	b410      	push	{r4}
 8001808:	6093      	str	r3, [r2, #8]
 800180a:	da08      	bge.n	800181e <__sfputc_r+0x1e>
 800180c:	6994      	ldr	r4, [r2, #24]
 800180e:	42a3      	cmp	r3, r4
 8001810:	db01      	blt.n	8001816 <__sfputc_r+0x16>
 8001812:	290a      	cmp	r1, #10
 8001814:	d103      	bne.n	800181e <__sfputc_r+0x1e>
 8001816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800181a:	f7ff bcab 	b.w	8001174 <__swbuf_r>
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	1c58      	adds	r0, r3, #1
 8001822:	6010      	str	r0, [r2, #0]
 8001824:	7019      	strb	r1, [r3, #0]
 8001826:	4608      	mov	r0, r1
 8001828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800182c:	4770      	bx	lr

0800182e <__sfputs_r>:
 800182e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001830:	4606      	mov	r6, r0
 8001832:	460f      	mov	r7, r1
 8001834:	4614      	mov	r4, r2
 8001836:	18d5      	adds	r5, r2, r3
 8001838:	42ac      	cmp	r4, r5
 800183a:	d101      	bne.n	8001840 <__sfputs_r+0x12>
 800183c:	2000      	movs	r0, #0
 800183e:	e007      	b.n	8001850 <__sfputs_r+0x22>
 8001840:	463a      	mov	r2, r7
 8001842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001846:	4630      	mov	r0, r6
 8001848:	f7ff ffda 	bl	8001800 <__sfputc_r>
 800184c:	1c43      	adds	r3, r0, #1
 800184e:	d1f3      	bne.n	8001838 <__sfputs_r+0xa>
 8001850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001854 <_vfiprintf_r>:
 8001854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001858:	460c      	mov	r4, r1
 800185a:	b09d      	sub	sp, #116	; 0x74
 800185c:	4617      	mov	r7, r2
 800185e:	461d      	mov	r5, r3
 8001860:	4606      	mov	r6, r0
 8001862:	b118      	cbz	r0, 800186c <_vfiprintf_r+0x18>
 8001864:	6983      	ldr	r3, [r0, #24]
 8001866:	b90b      	cbnz	r3, 800186c <_vfiprintf_r+0x18>
 8001868:	f7ff fe34 	bl	80014d4 <__sinit>
 800186c:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <_vfiprintf_r+0x20c>)
 800186e:	429c      	cmp	r4, r3
 8001870:	d158      	bne.n	8001924 <_vfiprintf_r+0xd0>
 8001872:	6874      	ldr	r4, [r6, #4]
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	0718      	lsls	r0, r3, #28
 8001878:	d55e      	bpl.n	8001938 <_vfiprintf_r+0xe4>
 800187a:	6923      	ldr	r3, [r4, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05b      	beq.n	8001938 <_vfiprintf_r+0xe4>
 8001880:	2300      	movs	r3, #0
 8001882:	9309      	str	r3, [sp, #36]	; 0x24
 8001884:	2320      	movs	r3, #32
 8001886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800188a:	2330      	movs	r3, #48	; 0x30
 800188c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001890:	9503      	str	r5, [sp, #12]
 8001892:	f04f 0b01 	mov.w	fp, #1
 8001896:	46b8      	mov	r8, r7
 8001898:	4645      	mov	r5, r8
 800189a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800189e:	b10b      	cbz	r3, 80018a4 <_vfiprintf_r+0x50>
 80018a0:	2b25      	cmp	r3, #37	; 0x25
 80018a2:	d154      	bne.n	800194e <_vfiprintf_r+0xfa>
 80018a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80018a8:	d00b      	beq.n	80018c2 <_vfiprintf_r+0x6e>
 80018aa:	4653      	mov	r3, sl
 80018ac:	463a      	mov	r2, r7
 80018ae:	4621      	mov	r1, r4
 80018b0:	4630      	mov	r0, r6
 80018b2:	f7ff ffbc 	bl	800182e <__sfputs_r>
 80018b6:	3001      	adds	r0, #1
 80018b8:	f000 80c2 	beq.w	8001a40 <_vfiprintf_r+0x1ec>
 80018bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018be:	4453      	add	r3, sl
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
 80018c2:	f898 3000 	ldrb.w	r3, [r8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80ba 	beq.w	8001a40 <_vfiprintf_r+0x1ec>
 80018cc:	2300      	movs	r3, #0
 80018ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018d6:	9304      	str	r3, [sp, #16]
 80018d8:	9307      	str	r3, [sp, #28]
 80018da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018de:	931a      	str	r3, [sp, #104]	; 0x68
 80018e0:	46a8      	mov	r8, r5
 80018e2:	2205      	movs	r2, #5
 80018e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80018e8:	485e      	ldr	r0, [pc, #376]	; (8001a64 <_vfiprintf_r+0x210>)
 80018ea:	f7fe fc99 	bl	8000220 <memchr>
 80018ee:	9b04      	ldr	r3, [sp, #16]
 80018f0:	bb78      	cbnz	r0, 8001952 <_vfiprintf_r+0xfe>
 80018f2:	06d9      	lsls	r1, r3, #27
 80018f4:	bf44      	itt	mi
 80018f6:	2220      	movmi	r2, #32
 80018f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018fc:	071a      	lsls	r2, r3, #28
 80018fe:	bf44      	itt	mi
 8001900:	222b      	movmi	r2, #43	; 0x2b
 8001902:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001906:	782a      	ldrb	r2, [r5, #0]
 8001908:	2a2a      	cmp	r2, #42	; 0x2a
 800190a:	d02a      	beq.n	8001962 <_vfiprintf_r+0x10e>
 800190c:	9a07      	ldr	r2, [sp, #28]
 800190e:	46a8      	mov	r8, r5
 8001910:	2000      	movs	r0, #0
 8001912:	250a      	movs	r5, #10
 8001914:	4641      	mov	r1, r8
 8001916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800191a:	3b30      	subs	r3, #48	; 0x30
 800191c:	2b09      	cmp	r3, #9
 800191e:	d969      	bls.n	80019f4 <_vfiprintf_r+0x1a0>
 8001920:	b360      	cbz	r0, 800197c <_vfiprintf_r+0x128>
 8001922:	e024      	b.n	800196e <_vfiprintf_r+0x11a>
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <_vfiprintf_r+0x214>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d101      	bne.n	800192e <_vfiprintf_r+0xda>
 800192a:	68b4      	ldr	r4, [r6, #8]
 800192c:	e7a2      	b.n	8001874 <_vfiprintf_r+0x20>
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <_vfiprintf_r+0x218>)
 8001930:	429c      	cmp	r4, r3
 8001932:	bf08      	it	eq
 8001934:	68f4      	ldreq	r4, [r6, #12]
 8001936:	e79d      	b.n	8001874 <_vfiprintf_r+0x20>
 8001938:	4621      	mov	r1, r4
 800193a:	4630      	mov	r0, r6
 800193c:	f7ff fc6c 	bl	8001218 <__swsetup_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	d09d      	beq.n	8001880 <_vfiprintf_r+0x2c>
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001948:	b01d      	add	sp, #116	; 0x74
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194e:	46a8      	mov	r8, r5
 8001950:	e7a2      	b.n	8001898 <_vfiprintf_r+0x44>
 8001952:	4a44      	ldr	r2, [pc, #272]	; (8001a64 <_vfiprintf_r+0x210>)
 8001954:	1a80      	subs	r0, r0, r2
 8001956:	fa0b f000 	lsl.w	r0, fp, r0
 800195a:	4318      	orrs	r0, r3
 800195c:	9004      	str	r0, [sp, #16]
 800195e:	4645      	mov	r5, r8
 8001960:	e7be      	b.n	80018e0 <_vfiprintf_r+0x8c>
 8001962:	9a03      	ldr	r2, [sp, #12]
 8001964:	1d11      	adds	r1, r2, #4
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	9103      	str	r1, [sp, #12]
 800196a:	2a00      	cmp	r2, #0
 800196c:	db01      	blt.n	8001972 <_vfiprintf_r+0x11e>
 800196e:	9207      	str	r2, [sp, #28]
 8001970:	e004      	b.n	800197c <_vfiprintf_r+0x128>
 8001972:	4252      	negs	r2, r2
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	9207      	str	r2, [sp, #28]
 800197a:	9304      	str	r3, [sp, #16]
 800197c:	f898 3000 	ldrb.w	r3, [r8]
 8001980:	2b2e      	cmp	r3, #46	; 0x2e
 8001982:	d10e      	bne.n	80019a2 <_vfiprintf_r+0x14e>
 8001984:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001988:	2b2a      	cmp	r3, #42	; 0x2a
 800198a:	d138      	bne.n	80019fe <_vfiprintf_r+0x1aa>
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	9203      	str	r2, [sp, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	bfb8      	it	lt
 8001998:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800199c:	f108 0802 	add.w	r8, r8, #2
 80019a0:	9305      	str	r3, [sp, #20]
 80019a2:	4d33      	ldr	r5, [pc, #204]	; (8001a70 <_vfiprintf_r+0x21c>)
 80019a4:	f898 1000 	ldrb.w	r1, [r8]
 80019a8:	2203      	movs	r2, #3
 80019aa:	4628      	mov	r0, r5
 80019ac:	f7fe fc38 	bl	8000220 <memchr>
 80019b0:	b140      	cbz	r0, 80019c4 <_vfiprintf_r+0x170>
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	1b40      	subs	r0, r0, r5
 80019b6:	fa03 f000 	lsl.w	r0, r3, r0
 80019ba:	9b04      	ldr	r3, [sp, #16]
 80019bc:	4303      	orrs	r3, r0
 80019be:	f108 0801 	add.w	r8, r8, #1
 80019c2:	9304      	str	r3, [sp, #16]
 80019c4:	f898 1000 	ldrb.w	r1, [r8]
 80019c8:	482a      	ldr	r0, [pc, #168]	; (8001a74 <_vfiprintf_r+0x220>)
 80019ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019ce:	2206      	movs	r2, #6
 80019d0:	f108 0701 	add.w	r7, r8, #1
 80019d4:	f7fe fc24 	bl	8000220 <memchr>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d037      	beq.n	8001a4c <_vfiprintf_r+0x1f8>
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <_vfiprintf_r+0x224>)
 80019de:	bb1b      	cbnz	r3, 8001a28 <_vfiprintf_r+0x1d4>
 80019e0:	9b03      	ldr	r3, [sp, #12]
 80019e2:	3307      	adds	r3, #7
 80019e4:	f023 0307 	bic.w	r3, r3, #7
 80019e8:	3308      	adds	r3, #8
 80019ea:	9303      	str	r3, [sp, #12]
 80019ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ee:	444b      	add	r3, r9
 80019f0:	9309      	str	r3, [sp, #36]	; 0x24
 80019f2:	e750      	b.n	8001896 <_vfiprintf_r+0x42>
 80019f4:	fb05 3202 	mla	r2, r5, r2, r3
 80019f8:	2001      	movs	r0, #1
 80019fa:	4688      	mov	r8, r1
 80019fc:	e78a      	b.n	8001914 <_vfiprintf_r+0xc0>
 80019fe:	2300      	movs	r3, #0
 8001a00:	f108 0801 	add.w	r8, r8, #1
 8001a04:	9305      	str	r3, [sp, #20]
 8001a06:	4619      	mov	r1, r3
 8001a08:	250a      	movs	r5, #10
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a10:	3a30      	subs	r2, #48	; 0x30
 8001a12:	2a09      	cmp	r2, #9
 8001a14:	d903      	bls.n	8001a1e <_vfiprintf_r+0x1ca>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0c3      	beq.n	80019a2 <_vfiprintf_r+0x14e>
 8001a1a:	9105      	str	r1, [sp, #20]
 8001a1c:	e7c1      	b.n	80019a2 <_vfiprintf_r+0x14e>
 8001a1e:	fb05 2101 	mla	r1, r5, r1, r2
 8001a22:	2301      	movs	r3, #1
 8001a24:	4680      	mov	r8, r0
 8001a26:	e7f0      	b.n	8001a0a <_vfiprintf_r+0x1b6>
 8001a28:	ab03      	add	r3, sp, #12
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_vfiprintf_r+0x228>)
 8001a30:	a904      	add	r1, sp, #16
 8001a32:	4630      	mov	r0, r6
 8001a34:	f3af 8000 	nop.w
 8001a38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a3c:	4681      	mov	r9, r0
 8001a3e:	d1d5      	bne.n	80019ec <_vfiprintf_r+0x198>
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	065b      	lsls	r3, r3, #25
 8001a44:	f53f af7e 	bmi.w	8001944 <_vfiprintf_r+0xf0>
 8001a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a4a:	e77d      	b.n	8001948 <_vfiprintf_r+0xf4>
 8001a4c:	ab03      	add	r3, sp, #12
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4622      	mov	r2, r4
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <_vfiprintf_r+0x228>)
 8001a54:	a904      	add	r1, sp, #16
 8001a56:	4630      	mov	r0, r6
 8001a58:	f000 f888 	bl	8001b6c <_printf_i>
 8001a5c:	e7ec      	b.n	8001a38 <_vfiprintf_r+0x1e4>
 8001a5e:	bf00      	nop
 8001a60:	08001f7c 	.word	0x08001f7c
 8001a64:	08001fbc 	.word	0x08001fbc
 8001a68:	08001f9c 	.word	0x08001f9c
 8001a6c:	08001f5c 	.word	0x08001f5c
 8001a70:	08001fc2 	.word	0x08001fc2
 8001a74:	08001fc6 	.word	0x08001fc6
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	0800182f 	.word	0x0800182f

08001a80 <_printf_common>:
 8001a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a84:	4691      	mov	r9, r2
 8001a86:	461f      	mov	r7, r3
 8001a88:	688a      	ldr	r2, [r1, #8]
 8001a8a:	690b      	ldr	r3, [r1, #16]
 8001a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bfb8      	it	lt
 8001a94:	4613      	movlt	r3, r2
 8001a96:	f8c9 3000 	str.w	r3, [r9]
 8001a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	b112      	cbz	r2, 8001aaa <_printf_common+0x2a>
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c9 3000 	str.w	r3, [r9]
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	0699      	lsls	r1, r3, #26
 8001aae:	bf42      	ittt	mi
 8001ab0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ab4:	3302      	addmi	r3, #2
 8001ab6:	f8c9 3000 	strmi.w	r3, [r9]
 8001aba:	6825      	ldr	r5, [r4, #0]
 8001abc:	f015 0506 	ands.w	r5, r5, #6
 8001ac0:	d107      	bne.n	8001ad2 <_printf_common+0x52>
 8001ac2:	f104 0a19 	add.w	sl, r4, #25
 8001ac6:	68e3      	ldr	r3, [r4, #12]
 8001ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	dc28      	bgt.n	8001b24 <_printf_common+0xa4>
 8001ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	3300      	adds	r3, #0
 8001ada:	bf18      	it	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	0692      	lsls	r2, r2, #26
 8001ae0:	d42d      	bmi.n	8001b3e <_printf_common+0xbe>
 8001ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ae6:	4639      	mov	r1, r7
 8001ae8:	4630      	mov	r0, r6
 8001aea:	47c0      	blx	r8
 8001aec:	3001      	adds	r0, #1
 8001aee:	d020      	beq.n	8001b32 <_printf_common+0xb2>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	68e5      	ldr	r5, [r4, #12]
 8001af4:	f8d9 2000 	ldr.w	r2, [r9]
 8001af8:	f003 0306 	and.w	r3, r3, #6
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	bf08      	it	eq
 8001b00:	1aad      	subeq	r5, r5, r2
 8001b02:	68a3      	ldr	r3, [r4, #8]
 8001b04:	6922      	ldr	r2, [r4, #16]
 8001b06:	bf0c      	ite	eq
 8001b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b0c:	2500      	movne	r5, #0
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	bfc4      	itt	gt
 8001b12:	1a9b      	subgt	r3, r3, r2
 8001b14:	18ed      	addgt	r5, r5, r3
 8001b16:	f04f 0900 	mov.w	r9, #0
 8001b1a:	341a      	adds	r4, #26
 8001b1c:	454d      	cmp	r5, r9
 8001b1e:	d11a      	bne.n	8001b56 <_printf_common+0xd6>
 8001b20:	2000      	movs	r0, #0
 8001b22:	e008      	b.n	8001b36 <_printf_common+0xb6>
 8001b24:	2301      	movs	r3, #1
 8001b26:	4652      	mov	r2, sl
 8001b28:	4639      	mov	r1, r7
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	47c0      	blx	r8
 8001b2e:	3001      	adds	r0, #1
 8001b30:	d103      	bne.n	8001b3a <_printf_common+0xba>
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b3a:	3501      	adds	r5, #1
 8001b3c:	e7c3      	b.n	8001ac6 <_printf_common+0x46>
 8001b3e:	18e1      	adds	r1, r4, r3
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	2030      	movs	r0, #48	; 0x30
 8001b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b48:	4422      	add	r2, r4
 8001b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b52:	3302      	adds	r3, #2
 8001b54:	e7c5      	b.n	8001ae2 <_printf_common+0x62>
 8001b56:	2301      	movs	r3, #1
 8001b58:	4622      	mov	r2, r4
 8001b5a:	4639      	mov	r1, r7
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	47c0      	blx	r8
 8001b60:	3001      	adds	r0, #1
 8001b62:	d0e6      	beq.n	8001b32 <_printf_common+0xb2>
 8001b64:	f109 0901 	add.w	r9, r9, #1
 8001b68:	e7d8      	b.n	8001b1c <_printf_common+0x9c>
	...

08001b6c <_printf_i>:
 8001b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b74:	460c      	mov	r4, r1
 8001b76:	7e09      	ldrb	r1, [r1, #24]
 8001b78:	b085      	sub	sp, #20
 8001b7a:	296e      	cmp	r1, #110	; 0x6e
 8001b7c:	4617      	mov	r7, r2
 8001b7e:	4606      	mov	r6, r0
 8001b80:	4698      	mov	r8, r3
 8001b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b84:	f000 80b3 	beq.w	8001cee <_printf_i+0x182>
 8001b88:	d822      	bhi.n	8001bd0 <_printf_i+0x64>
 8001b8a:	2963      	cmp	r1, #99	; 0x63
 8001b8c:	d036      	beq.n	8001bfc <_printf_i+0x90>
 8001b8e:	d80a      	bhi.n	8001ba6 <_printf_i+0x3a>
 8001b90:	2900      	cmp	r1, #0
 8001b92:	f000 80b9 	beq.w	8001d08 <_printf_i+0x19c>
 8001b96:	2958      	cmp	r1, #88	; 0x58
 8001b98:	f000 8083 	beq.w	8001ca2 <_printf_i+0x136>
 8001b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ba0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001ba4:	e032      	b.n	8001c0c <_printf_i+0xa0>
 8001ba6:	2964      	cmp	r1, #100	; 0x64
 8001ba8:	d001      	beq.n	8001bae <_printf_i+0x42>
 8001baa:	2969      	cmp	r1, #105	; 0x69
 8001bac:	d1f6      	bne.n	8001b9c <_printf_i+0x30>
 8001bae:	6820      	ldr	r0, [r4, #0]
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	0605      	lsls	r5, r0, #24
 8001bb4:	f103 0104 	add.w	r1, r3, #4
 8001bb8:	d52a      	bpl.n	8001c10 <_printf_i+0xa4>
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6011      	str	r1, [r2, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da03      	bge.n	8001bca <_printf_i+0x5e>
 8001bc2:	222d      	movs	r2, #45	; 0x2d
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bca:	486f      	ldr	r0, [pc, #444]	; (8001d88 <_printf_i+0x21c>)
 8001bcc:	220a      	movs	r2, #10
 8001bce:	e039      	b.n	8001c44 <_printf_i+0xd8>
 8001bd0:	2973      	cmp	r1, #115	; 0x73
 8001bd2:	f000 809d 	beq.w	8001d10 <_printf_i+0x1a4>
 8001bd6:	d808      	bhi.n	8001bea <_printf_i+0x7e>
 8001bd8:	296f      	cmp	r1, #111	; 0x6f
 8001bda:	d020      	beq.n	8001c1e <_printf_i+0xb2>
 8001bdc:	2970      	cmp	r1, #112	; 0x70
 8001bde:	d1dd      	bne.n	8001b9c <_printf_i+0x30>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f043 0320 	orr.w	r3, r3, #32
 8001be6:	6023      	str	r3, [r4, #0]
 8001be8:	e003      	b.n	8001bf2 <_printf_i+0x86>
 8001bea:	2975      	cmp	r1, #117	; 0x75
 8001bec:	d017      	beq.n	8001c1e <_printf_i+0xb2>
 8001bee:	2978      	cmp	r1, #120	; 0x78
 8001bf0:	d1d4      	bne.n	8001b9c <_printf_i+0x30>
 8001bf2:	2378      	movs	r3, #120	; 0x78
 8001bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bf8:	4864      	ldr	r0, [pc, #400]	; (8001d8c <_printf_i+0x220>)
 8001bfa:	e055      	b.n	8001ca8 <_printf_i+0x13c>
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	1d19      	adds	r1, r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6011      	str	r1, [r2, #0]
 8001c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e08c      	b.n	8001d2a <_printf_i+0x1be>
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6011      	str	r1, [r2, #0]
 8001c14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c18:	bf18      	it	ne
 8001c1a:	b21b      	sxthne	r3, r3
 8001c1c:	e7cf      	b.n	8001bbe <_printf_i+0x52>
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	6825      	ldr	r5, [r4, #0]
 8001c22:	1d18      	adds	r0, r3, #4
 8001c24:	6010      	str	r0, [r2, #0]
 8001c26:	0628      	lsls	r0, r5, #24
 8001c28:	d501      	bpl.n	8001c2e <_printf_i+0xc2>
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e002      	b.n	8001c34 <_printf_i+0xc8>
 8001c2e:	0668      	lsls	r0, r5, #25
 8001c30:	d5fb      	bpl.n	8001c2a <_printf_i+0xbe>
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	4854      	ldr	r0, [pc, #336]	; (8001d88 <_printf_i+0x21c>)
 8001c36:	296f      	cmp	r1, #111	; 0x6f
 8001c38:	bf14      	ite	ne
 8001c3a:	220a      	movne	r2, #10
 8001c3c:	2208      	moveq	r2, #8
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c44:	6865      	ldr	r5, [r4, #4]
 8001c46:	60a5      	str	r5, [r4, #8]
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	f2c0 8095 	blt.w	8001d78 <_printf_i+0x20c>
 8001c4e:	6821      	ldr	r1, [r4, #0]
 8001c50:	f021 0104 	bic.w	r1, r1, #4
 8001c54:	6021      	str	r1, [r4, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d13d      	bne.n	8001cd6 <_printf_i+0x16a>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	f040 808e 	bne.w	8001d7c <_printf_i+0x210>
 8001c60:	4665      	mov	r5, ip
 8001c62:	2a08      	cmp	r2, #8
 8001c64:	d10b      	bne.n	8001c7e <_printf_i+0x112>
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	07db      	lsls	r3, r3, #31
 8001c6a:	d508      	bpl.n	8001c7e <_printf_i+0x112>
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	bfde      	ittt	le
 8001c74:	2330      	movle	r3, #48	; 0x30
 8001c76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001c7e:	ebac 0305 	sub.w	r3, ip, r5
 8001c82:	6123      	str	r3, [r4, #16]
 8001c84:	f8cd 8000 	str.w	r8, [sp]
 8001c88:	463b      	mov	r3, r7
 8001c8a:	aa03      	add	r2, sp, #12
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff fef6 	bl	8001a80 <_printf_common>
 8001c94:	3001      	adds	r0, #1
 8001c96:	d14d      	bne.n	8001d34 <_printf_i+0x1c8>
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c9c:	b005      	add	sp, #20
 8001c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <_printf_i+0x21c>)
 8001ca4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ca8:	6813      	ldr	r3, [r2, #0]
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	1d1d      	adds	r5, r3, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6015      	str	r5, [r2, #0]
 8001cb2:	060a      	lsls	r2, r1, #24
 8001cb4:	d50b      	bpl.n	8001cce <_printf_i+0x162>
 8001cb6:	07ca      	lsls	r2, r1, #31
 8001cb8:	bf44      	itt	mi
 8001cba:	f041 0120 	orrmi.w	r1, r1, #32
 8001cbe:	6021      	strmi	r1, [r4, #0]
 8001cc0:	b91b      	cbnz	r3, 8001cca <_printf_i+0x15e>
 8001cc2:	6822      	ldr	r2, [r4, #0]
 8001cc4:	f022 0220 	bic.w	r2, r2, #32
 8001cc8:	6022      	str	r2, [r4, #0]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	e7b7      	b.n	8001c3e <_printf_i+0xd2>
 8001cce:	064d      	lsls	r5, r1, #25
 8001cd0:	bf48      	it	mi
 8001cd2:	b29b      	uxthmi	r3, r3
 8001cd4:	e7ef      	b.n	8001cb6 <_printf_i+0x14a>
 8001cd6:	4665      	mov	r5, ip
 8001cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cdc:	fb02 3311 	mls	r3, r2, r1, r3
 8001ce0:	5cc3      	ldrb	r3, [r0, r3]
 8001ce2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	d1f5      	bne.n	8001cd8 <_printf_i+0x16c>
 8001cec:	e7b9      	b.n	8001c62 <_printf_i+0xf6>
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	6825      	ldr	r5, [r4, #0]
 8001cf2:	6961      	ldr	r1, [r4, #20]
 8001cf4:	1d18      	adds	r0, r3, #4
 8001cf6:	6010      	str	r0, [r2, #0]
 8001cf8:	0628      	lsls	r0, r5, #24
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	d501      	bpl.n	8001d02 <_printf_i+0x196>
 8001cfe:	6019      	str	r1, [r3, #0]
 8001d00:	e002      	b.n	8001d08 <_printf_i+0x19c>
 8001d02:	066a      	lsls	r2, r5, #25
 8001d04:	d5fb      	bpl.n	8001cfe <_printf_i+0x192>
 8001d06:	8019      	strh	r1, [r3, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6123      	str	r3, [r4, #16]
 8001d0c:	4665      	mov	r5, ip
 8001d0e:	e7b9      	b.n	8001c84 <_printf_i+0x118>
 8001d10:	6813      	ldr	r3, [r2, #0]
 8001d12:	1d19      	adds	r1, r3, #4
 8001d14:	6011      	str	r1, [r2, #0]
 8001d16:	681d      	ldr	r5, [r3, #0]
 8001d18:	6862      	ldr	r2, [r4, #4]
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f7fe fa7f 	bl	8000220 <memchr>
 8001d22:	b108      	cbz	r0, 8001d28 <_printf_i+0x1bc>
 8001d24:	1b40      	subs	r0, r0, r5
 8001d26:	6060      	str	r0, [r4, #4]
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	6123      	str	r3, [r4, #16]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d32:	e7a7      	b.n	8001c84 <_printf_i+0x118>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	462a      	mov	r2, r5
 8001d38:	4639      	mov	r1, r7
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	47c0      	blx	r8
 8001d3e:	3001      	adds	r0, #1
 8001d40:	d0aa      	beq.n	8001c98 <_printf_i+0x12c>
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	079b      	lsls	r3, r3, #30
 8001d46:	d413      	bmi.n	8001d70 <_printf_i+0x204>
 8001d48:	68e0      	ldr	r0, [r4, #12]
 8001d4a:	9b03      	ldr	r3, [sp, #12]
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	bfb8      	it	lt
 8001d50:	4618      	movlt	r0, r3
 8001d52:	e7a3      	b.n	8001c9c <_printf_i+0x130>
 8001d54:	2301      	movs	r3, #1
 8001d56:	464a      	mov	r2, r9
 8001d58:	4639      	mov	r1, r7
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	47c0      	blx	r8
 8001d5e:	3001      	adds	r0, #1
 8001d60:	d09a      	beq.n	8001c98 <_printf_i+0x12c>
 8001d62:	3501      	adds	r5, #1
 8001d64:	68e3      	ldr	r3, [r4, #12]
 8001d66:	9a03      	ldr	r2, [sp, #12]
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	42ab      	cmp	r3, r5
 8001d6c:	dcf2      	bgt.n	8001d54 <_printf_i+0x1e8>
 8001d6e:	e7eb      	b.n	8001d48 <_printf_i+0x1dc>
 8001d70:	2500      	movs	r5, #0
 8001d72:	f104 0919 	add.w	r9, r4, #25
 8001d76:	e7f5      	b.n	8001d64 <_printf_i+0x1f8>
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ac      	bne.n	8001cd6 <_printf_i+0x16a>
 8001d7c:	7803      	ldrb	r3, [r0, #0]
 8001d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d86:	e76c      	b.n	8001c62 <_printf_i+0xf6>
 8001d88:	08001fcd 	.word	0x08001fcd
 8001d8c:	08001fde 	.word	0x08001fde

08001d90 <_sbrk_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4c06      	ldr	r4, [pc, #24]	; (8001dac <_sbrk_r+0x1c>)
 8001d94:	2300      	movs	r3, #0
 8001d96:	4605      	mov	r5, r0
 8001d98:	4608      	mov	r0, r1
 8001d9a:	6023      	str	r3, [r4, #0]
 8001d9c:	f7fe fc7a 	bl	8000694 <_sbrk>
 8001da0:	1c43      	adds	r3, r0, #1
 8001da2:	d102      	bne.n	8001daa <_sbrk_r+0x1a>
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	b103      	cbz	r3, 8001daa <_sbrk_r+0x1a>
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
 8001dac:	2000008c 	.word	0x2000008c

08001db0 <__sread>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	460c      	mov	r4, r1
 8001db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db8:	f000 f896 	bl	8001ee8 <_read_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	bfab      	itete	ge
 8001dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8001dc4:	181b      	addge	r3, r3, r0
 8001dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dca:	bfac      	ite	ge
 8001dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dce:	81a3      	strhlt	r3, [r4, #12]
 8001dd0:	bd10      	pop	{r4, pc}

08001dd2 <__swrite>:
 8001dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd6:	461f      	mov	r7, r3
 8001dd8:	898b      	ldrh	r3, [r1, #12]
 8001dda:	05db      	lsls	r3, r3, #23
 8001ddc:	4605      	mov	r5, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4616      	mov	r6, r2
 8001de2:	d505      	bpl.n	8001df0 <__swrite+0x1e>
 8001de4:	2302      	movs	r3, #2
 8001de6:	2200      	movs	r2, #0
 8001de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dec:	f000 f868 	bl	8001ec0 <_lseek_r>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dfa:	81a3      	strh	r3, [r4, #12]
 8001dfc:	4632      	mov	r2, r6
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4628      	mov	r0, r5
 8001e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e06:	f000 b817 	b.w	8001e38 <_write_r>

08001e0a <__sseek>:
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e12:	f000 f855 	bl	8001ec0 <_lseek_r>
 8001e16:	1c43      	adds	r3, r0, #1
 8001e18:	89a3      	ldrh	r3, [r4, #12]
 8001e1a:	bf15      	itete	ne
 8001e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e26:	81a3      	strheq	r3, [r4, #12]
 8001e28:	bf18      	it	ne
 8001e2a:	81a3      	strhne	r3, [r4, #12]
 8001e2c:	bd10      	pop	{r4, pc}

08001e2e <__sclose>:
 8001e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e32:	f000 b813 	b.w	8001e5c <_close_r>
	...

08001e38 <_write_r>:
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4c07      	ldr	r4, [pc, #28]	; (8001e58 <_write_r+0x20>)
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	4608      	mov	r0, r1
 8001e40:	4611      	mov	r1, r2
 8001e42:	2200      	movs	r2, #0
 8001e44:	6022      	str	r2, [r4, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f7fe fbd3 	bl	80005f2 <_write>
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	d102      	bne.n	8001e56 <_write_r+0x1e>
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	b103      	cbz	r3, 8001e56 <_write_r+0x1e>
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
 8001e58:	2000008c 	.word	0x2000008c

08001e5c <_close_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4c06      	ldr	r4, [pc, #24]	; (8001e78 <_close_r+0x1c>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	4605      	mov	r5, r0
 8001e64:	4608      	mov	r0, r1
 8001e66:	6023      	str	r3, [r4, #0]
 8001e68:	f7fe fbdf 	bl	800062a <_close>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d102      	bne.n	8001e76 <_close_r+0x1a>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	b103      	cbz	r3, 8001e76 <_close_r+0x1a>
 8001e74:	602b      	str	r3, [r5, #0]
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
 8001e78:	2000008c 	.word	0x2000008c

08001e7c <_fstat_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4c07      	ldr	r4, [pc, #28]	; (8001e9c <_fstat_r+0x20>)
 8001e80:	2300      	movs	r3, #0
 8001e82:	4605      	mov	r5, r0
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	f7fe fbda 	bl	8000642 <_fstat>
 8001e8e:	1c43      	adds	r3, r0, #1
 8001e90:	d102      	bne.n	8001e98 <_fstat_r+0x1c>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	b103      	cbz	r3, 8001e98 <_fstat_r+0x1c>
 8001e96:	602b      	str	r3, [r5, #0]
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000008c 	.word	0x2000008c

08001ea0 <_isatty_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4c06      	ldr	r4, [pc, #24]	; (8001ebc <_isatty_r+0x1c>)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	f7fe fbd9 	bl	8000662 <_isatty>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d102      	bne.n	8001eba <_isatty_r+0x1a>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	b103      	cbz	r3, 8001eba <_isatty_r+0x1a>
 8001eb8:	602b      	str	r3, [r5, #0]
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	2000008c 	.word	0x2000008c

08001ec0 <_lseek_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4c07      	ldr	r4, [pc, #28]	; (8001ee0 <_lseek_r+0x20>)
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	6022      	str	r2, [r4, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f7fe fbd2 	bl	8000678 <_lseek>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_lseek_r+0x1e>
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_lseek_r+0x1e>
 8001edc:	602b      	str	r3, [r5, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	2000008c 	.word	0x2000008c

08001ee4 <__malloc_lock>:
 8001ee4:	4770      	bx	lr

08001ee6 <__malloc_unlock>:
 8001ee6:	4770      	bx	lr

08001ee8 <_read_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4c07      	ldr	r4, [pc, #28]	; (8001f08 <_read_r+0x20>)
 8001eec:	4605      	mov	r5, r0
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6022      	str	r2, [r4, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7fe fb5e 	bl	80005b8 <_read>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d102      	bne.n	8001f06 <_read_r+0x1e>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	b103      	cbz	r3, 8001f06 <_read_r+0x1e>
 8001f04:	602b      	str	r3, [r5, #0]
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	2000008c 	.word	0x2000008c

08001f0c <_init>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	bf00      	nop
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr

08001f18 <_fini>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr
