
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d6c  08000d74  00010d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d6c  08000d6c  00010d74  2**0
                  CONTENTS
  4 .ARM          00000000  08000d6c  08000d6c  00010d74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d6c  08000d74  00010d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d6c  08000d6c  00010d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d70  08000d70  00010d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d74  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001918  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000479  00000000  00000000  000126bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00012b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00012ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020c2  00000000  00000000  00012dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011f8  00000000  00000000  00014e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008cff  00000000  00000000  0001608a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ed89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000050c  00000000  00000000  0001ee04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d54 	.word	0x08000d54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d54 	.word	0x08000d54

080001e8 <delay>:
 * SPI_MOSI	->	PB15
 */


void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<=1000000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000f4240 	.word	0x000f4240

08000214 <SPI2_GPIOInits>:
}


/*------Function to initialize GPIO PIN as SPI PIN-------*/
void SPI2_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2Pins;

	SPI2Pins.pGPIOx = GPIOB;
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <SPI2_GPIOInits+0x58>)
 800021c:	607b      	str	r3, [r7, #4]
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFuncMode = AF5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPI2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPI2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	// Enable SCLK
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa57 	bl	80006ec <GPIO_Init>

	// Enable NSS
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800023e:	230c      	movs	r3, #12
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fa51 	bl	80006ec <GPIO_Init>

	// Enable MOSI
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800024a:	230e      	movs	r3, #14
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fa4b 	bl	80006ec <GPIO_Init>

	// Enable MISO
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000256:	230f      	movs	r3, #15
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fa45 	bl	80006ec <GPIO_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <GPIOButtonInit>:

void GPIOButtonInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	//Create and Initialize the Handle structure for GPIO Button
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <GPIOButtonInit+0x2c>)
 8000278:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800027a:	2300      	movs	r3, #0
 800027c:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOButton);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa2d 	bl	80006ec <GPIO_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40020000 	.word	0x40020000

080002a0 <GPIOLedInit>:

void GPIOLedInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	//Create and initialize the Handle structure for GPIO LED
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOD;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <GPIOLedInit+0x30>)
 80002a8:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80002aa:	230c      	movs	r3, #12
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002ae:	2301      	movs	r3, #1
 80002b0:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80002b2:	2301      	movs	r3, #1
 80002b4:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 80002b6:	2300      	movs	r3, #0
 80002b8:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOLed);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa13 	bl	80006ec <GPIO_Init>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <SPI2Init>:


/*------Function to initialize SPI2 Peripheral--------*/
void SPI2Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <SPI2Init+0x38>)
 80002dc:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_PinConfig.SPI_DeviceMode	= SPI_MODE_MASTER;
 80002de:	2301      	movs	r3, #1
 80002e0:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_PinConfig.SPI_BusConfig	= SPI_BUS_FULL_DUP;
 80002e2:	2301      	movs	r3, #1
 80002e4:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_PinConfig.SPI_DFF		= SPI_DFF_8BIT;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_PinConfig.SPI_CPHA		= SPI_CPHA_FIRST_EDGE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_PinConfig.SPI_CPOL		= SPI_CPOL_LOW;
 80002ee:	2300      	movs	r3, #0
 80002f0:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_PinConfig.SPI_SSM		= SPI_SSM_DI;
 80002f2:	2300      	movs	r3, #0
 80002f4:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_PinConfig.SPI_SCLKSpeed	= SPI_SCLK_BY_8;
 80002f6:	2302      	movs	r3, #2
 80002f8:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fbf1 	bl	8000ae4 <SPI_Init>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40003800 	.word	0x40003800

08000310 <main>:


int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
	uint8_t Data = 255;
 8000316:	23ff      	movs	r3, #255	; 0xff
 8000318:	71fb      	strb	r3, [r7, #7]
	uint8_t Read = 10;
 800031a:	230a      	movs	r3, #10
 800031c:	71bb      	strb	r3, [r7, #6]

	// Initialize GPIO PIN to behave as SPI PIN
	SPI2_GPIOInits();
 800031e:	f7ff ff79 	bl	8000214 <SPI2_GPIOInits>

	// Initialize GPIO PIN for button
	GPIOButtonInit();
 8000322:	f7ff ffa5 	bl	8000270 <GPIOButtonInit>

	// Initialize GPIO PIN for LED
	GPIOLedInit();
 8000326:	f7ff ffbb 	bl	80002a0 <GPIOLedInit>

	// Initialize SPI peripheral parameters
	SPI2Init();
 800032a:	f7ff ffd3 	bl	80002d4 <SPI2Init>

	// Since SSM is enabled, SSI bit needs to be kept high.
	//SPI_SSIConfig(SPI2, ENABLE);
	SPI_SSOEConfig(SPI2, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	4839      	ldr	r0, [pc, #228]	; (8000418 <main+0x108>)
 8000332:	f000 fcce 	bl	8000cd2 <SPI_SSOEConfig>

	// Enable the SPI2 peripheral
	SPI_PCtrl(SPI2, ENABLE);
 8000336:	2101      	movs	r1, #1
 8000338:	4837      	ldr	r0, [pc, #220]	; (8000418 <main+0x108>)
 800033a:	f000 fcae 	bl	8000c9a <SPI_PCtrl>


	// Wait for the button to be pressed
	//while( GPIO_ReadfromIPPin(GPIOA, GPIO_PIN_0) == RESET );

	SPI_DataSend(SPI2, &Data, 1);
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	2201      	movs	r2, #1
 8000342:	4619      	mov	r1, r3
 8000344:	4834      	ldr	r0, [pc, #208]	; (8000418 <main+0x108>)
 8000346:	f000 fc3c 	bl	8000bc2 <SPI_DataSend>
	SPI_DataReceive(SPI2, &Read, 1);
 800034a:	1dbb      	adds	r3, r7, #6
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	4831      	ldr	r0, [pc, #196]	; (8000418 <main+0x108>)
 8000352:	f000 fc6c 	bl	8000c2e <SPI_DataReceive>

	delay();
 8000356:	f7ff ff47 	bl	80001e8 <delay>

	if(Read == 0)
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d107      	bne.n	8000370 <main+0x60>
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	210c      	movs	r1, #12
 8000364:	482d      	ldr	r0, [pc, #180]	; (800041c <main+0x10c>)
 8000366:	f000 fb3d 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 800036a:	f7ff ff3d 	bl	80001e8 <delay>
 800036e:	e046      	b.n	80003fe <main+0xee>
	}
	else if(Read == 2)
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d10e      	bne.n	8000394 <main+0x84>
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 8000376:	2201      	movs	r2, #1
 8000378:	210c      	movs	r1, #12
 800037a:	4828      	ldr	r0, [pc, #160]	; (800041c <main+0x10c>)
 800037c:	f000 fb32 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 8000380:	f7ff ff32 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	210c      	movs	r1, #12
 8000388:	4824      	ldr	r0, [pc, #144]	; (800041c <main+0x10c>)
 800038a:	f000 fb2b 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 800038e:	f7ff ff2b 	bl	80001e8 <delay>
 8000392:	e034      	b.n	80003fe <main+0xee>
	}
	else if(Read == 255)
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d11c      	bne.n	80003d4 <main+0xc4>
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 800039a:	2201      	movs	r2, #1
 800039c:	210c      	movs	r1, #12
 800039e:	481f      	ldr	r0, [pc, #124]	; (800041c <main+0x10c>)
 80003a0:	f000 fb20 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003a4:	f7ff ff20 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	210c      	movs	r1, #12
 80003ac:	481b      	ldr	r0, [pc, #108]	; (800041c <main+0x10c>)
 80003ae:	f000 fb19 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003b2:	f7ff ff19 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	210c      	movs	r1, #12
 80003ba:	4818      	ldr	r0, [pc, #96]	; (800041c <main+0x10c>)
 80003bc:	f000 fb12 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003c0:	f7ff ff12 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	210c      	movs	r1, #12
 80003c8:	4814      	ldr	r0, [pc, #80]	; (800041c <main+0x10c>)
 80003ca:	f000 fb0b 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003ce:	f7ff ff0b 	bl	80001e8 <delay>
 80003d2:	e014      	b.n	80003fe <main+0xee>
	}
	else
	{
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	210c      	movs	r1, #12
 80003d8:	4810      	ldr	r0, [pc, #64]	; (800041c <main+0x10c>)
 80003da:	f000 fb03 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003de:	f7ff ff03 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	210c      	movs	r1, #12
 80003e6:	480d      	ldr	r0, [pc, #52]	; (800041c <main+0x10c>)
 80003e8:	f000 fafc 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003ec:	f7ff fefc 	bl	80001e8 <delay>
		GPIO_WriteToOPPin(GPIOD, GPIO_PIN_12, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	210c      	movs	r1, #12
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <main+0x10c>)
 80003f6:	f000 faf5 	bl	80009e4 <GPIO_WriteToOPPin>
		delay();
 80003fa:	f7ff fef5 	bl	80001e8 <delay>
	//BlinkLed(Read);



	//Wait till SPI is busy
	while( FlagStatus(SPI2, SPI_BUSY_FLAG) );
 80003fe:	bf00      	nop
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <main+0x108>)
 8000404:	f000 fbc9 	bl	8000b9a <FlagStatus>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f8      	bne.n	8000400 <main+0xf0>

	//Disable the SPI2 peripheral
	SPI_PCtrl(SPI2, DISABLE);
 800040e:	2100      	movs	r1, #0
 8000410:	4801      	ldr	r0, [pc, #4]	; (8000418 <main+0x108>)
 8000412:	f000 fc42 	bl	8000c9a <SPI_PCtrl>

	while(1);
 8000416:	e7fe      	b.n	8000416 <main+0x106>
 8000418:	40003800 	.word	0x40003800
 800041c:	40020c00 	.word	0x40020c00

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 fc5d 	bl	8000d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff5d 	bl	8000310 <main>

08000456 <LoopForever>:

LoopForever:
    b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000464:	08000d74 	.word	0x08000d74
  ldr r2, =_sbss
 8000468:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800046c:	2000001c 	.word	0x2000001c

08000470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>
	...

08000474 <CONV_GPIOx_TO_PORTCODE>:


/* This function returns a code (0-7) for a given GPIOx peripheral */

uint8_t CONV_GPIOx_TO_PORTCODE(GPIO_RegDef_t *pGPIOx)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	uint8_t portcode = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
	if (pGPIOx == GPIOA)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <CONV_GPIOx_TO_PORTCODE+0x88>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d102      	bne.n	800048e <CONV_GPIOx_TO_PORTCODE+0x1a>
	{
		portcode = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
 800048c:	e02f      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOB)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <CONV_GPIOx_TO_PORTCODE+0x8c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d102      	bne.n	800049c <CONV_GPIOx_TO_PORTCODE+0x28>
	{
		portcode = 1;
 8000496:	2301      	movs	r3, #1
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	e028      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOC)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <CONV_GPIOx_TO_PORTCODE+0x90>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d102      	bne.n	80004aa <CONV_GPIOx_TO_PORTCODE+0x36>
	{
		portcode = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	73fb      	strb	r3, [r7, #15]
 80004a8:	e021      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOD)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a16      	ldr	r2, [pc, #88]	; (8000508 <CONV_GPIOx_TO_PORTCODE+0x94>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d102      	bne.n	80004b8 <CONV_GPIOx_TO_PORTCODE+0x44>
	{
		portcode = 3;
 80004b2:	2303      	movs	r3, #3
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	e01a      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <CONV_GPIOx_TO_PORTCODE+0x98>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d102      	bne.n	80004c6 <CONV_GPIOx_TO_PORTCODE+0x52>
	{
		portcode = 4;
 80004c0:	2304      	movs	r3, #4
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e013      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOF)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a11      	ldr	r2, [pc, #68]	; (8000510 <CONV_GPIOx_TO_PORTCODE+0x9c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d102      	bne.n	80004d4 <CONV_GPIOx_TO_PORTCODE+0x60>
	{
		portcode = 5;
 80004ce:	2305      	movs	r3, #5
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	e00c      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOG)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <CONV_GPIOx_TO_PORTCODE+0xa0>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d102      	bne.n	80004e2 <CONV_GPIOx_TO_PORTCODE+0x6e>
	{
		portcode = 6;
 80004dc:	2306      	movs	r3, #6
 80004de:	73fb      	strb	r3, [r7, #15]
 80004e0:	e005      	b.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	}else if (pGPIOx == GPIOH)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <CONV_GPIOx_TO_PORTCODE+0xa4>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <CONV_GPIOx_TO_PORTCODE+0x7a>
	{
		portcode = 7;
 80004ea:	2307      	movs	r3, #7
 80004ec:	73fb      	strb	r3, [r7, #15]
	}
	return portcode;
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40020400 	.word	0x40020400
 8000504:	40020800 	.word	0x40020800
 8000508:	40020c00 	.word	0x40020c00
 800050c:	40021000 	.word	0x40021000
 8000510:	40021400 	.word	0x40021400
 8000514:	40021800 	.word	0x40021800
 8000518:	40021c00 	.word	0x40021c00

0800051c <GPIO_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d162      	bne.n	80005f4 <GPIO_PClkCtrl+0xd8>
	{
		if (pGPIOx == GPIOA)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a64      	ldr	r2, [pc, #400]	; (80006c4 <GPIO_PClkCtrl+0x1a8>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PClkCtrl+0x28>
		{
			GPIOA_CLK_EN();
 8000536:	4b64      	ldr	r3, [pc, #400]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a63      	ldr	r2, [pc, #396]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_CLK_DI();
		}
	}

}
 8000542:	e0b9      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a61      	ldr	r2, [pc, #388]	; (80006cc <GPIO_PClkCtrl+0x1b0>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PClkCtrl+0x3e>
			GPIOB_CLK_EN();
 800054c:	4b5e      	ldr	r3, [pc, #376]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a5d      	ldr	r2, [pc, #372]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e0ae      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a5c      	ldr	r2, [pc, #368]	; (80006d0 <GPIO_PClkCtrl+0x1b4>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PClkCtrl+0x54>
			GPIOC_CLK_EN();
 8000562:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a58      	ldr	r2, [pc, #352]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e0a3      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <GPIO_PClkCtrl+0x1b8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PClkCtrl+0x6a>
			GPIOD_CLK_EN();
 8000578:	4b53      	ldr	r3, [pc, #332]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a52      	ldr	r2, [pc, #328]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e098      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a53      	ldr	r2, [pc, #332]	; (80006d8 <GPIO_PClkCtrl+0x1bc>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PClkCtrl+0x80>
			GPIOE_CLK_EN();
 800058e:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a4d      	ldr	r2, [pc, #308]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e08d      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a4f      	ldr	r2, [pc, #316]	; (80006dc <GPIO_PClkCtrl+0x1c0>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PClkCtrl+0x96>
			GPIOF_CLK_EN();
 80005a4:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a47      	ldr	r2, [pc, #284]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e082      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a4a      	ldr	r2, [pc, #296]	; (80006e0 <GPIO_PClkCtrl+0x1c4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PClkCtrl+0xac>
			GPIOG_CLK_EN();
 80005ba:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a42      	ldr	r2, [pc, #264]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e077      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a46      	ldr	r2, [pc, #280]	; (80006e4 <GPIO_PClkCtrl+0x1c8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PClkCtrl+0xc2>
			GPIOH_CLK_EN();
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a3c      	ldr	r2, [pc, #240]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e06c      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a41      	ldr	r2, [pc, #260]	; (80006e8 <GPIO_PClkCtrl+0x1cc>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d168      	bne.n	80006b8 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_EN();
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a37      	ldr	r2, [pc, #220]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f2:	e061      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		if (pGPIOx == GPIOA)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <GPIO_PClkCtrl+0x1a8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PClkCtrl+0xee>
			GPIOA_CLK_DI();
 80005fc:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000602:	f023 0301 	bic.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	e056      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOB)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a2f      	ldr	r2, [pc, #188]	; (80006cc <GPIO_PClkCtrl+0x1b0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PClkCtrl+0x104>
			GPIOB_CLK_DI();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000618:	f023 0302 	bic.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061e:	e04b      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOC)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <GPIO_PClkCtrl+0x1b4>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d106      	bne.n	8000636 <GPIO_PClkCtrl+0x11a>
			GPIOC_CLK_DI();
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800062e:	f023 0304 	bic.w	r3, r3, #4
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000634:	e040      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOD)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <GPIO_PClkCtrl+0x1b8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <GPIO_PClkCtrl+0x130>
			GPIOD_CLK_DI();
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000644:	f023 0308 	bic.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064a:	e035      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOE)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <GPIO_PClkCtrl+0x1bc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d106      	bne.n	8000662 <GPIO_PClkCtrl+0x146>
			GPIOE_CLK_DI();
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800065a:	f023 0310 	bic.w	r3, r3, #16
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000660:	e02a      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOF)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <GPIO_PClkCtrl+0x1c0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d106      	bne.n	8000678 <GPIO_PClkCtrl+0x15c>
			GPIOF_CLK_DI();
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000670:	f023 0320 	bic.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000676:	e01f      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOG)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <GPIO_PClkCtrl+0x1c4>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d106      	bne.n	800068e <GPIO_PClkCtrl+0x172>
			GPIOG_CLK_DI();
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800068a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800068c:	e014      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOH)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <GPIO_PClkCtrl+0x1c8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d106      	bne.n	80006a4 <GPIO_PClkCtrl+0x188>
			GPIOH_CLK_DI();
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 800069c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a2:	e009      	b.n	80006b8 <GPIO_PClkCtrl+0x19c>
		else if (pGPIOx == GPIOI)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <GPIO_PClkCtrl+0x1cc>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d105      	bne.n	80006b8 <GPIO_PClkCtrl+0x19c>
			GPIOI_CLK_DI();
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <GPIO_PClkCtrl+0x1ac>)
 80006b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40021400 	.word	0x40021400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	40021c00 	.word	0x40021c00
 80006e8:	40022000 	.word	0x40022000

080006ec <GPIO_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	//0. Enable the Peripheral clock							//Updated on 19-Feb-2021
	GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff0e 	bl	800051c <GPIO_PClkCtrl>

	uint32_t	temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d820      	bhi.n	800074e <GPIO_Init+0x62>
	{
		//If the given Pin mode <= 3, it is non-interrupt mode, else interrupt mode
		//Left shifting 2 bit MODE value for specific PIN number
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) );
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	795b      	ldrb	r3, [r3, #5]
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	60fb      	str	r3, [r7, #12]

		// Clear the register values for specific pin
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2103      	movs	r1, #3
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	400a      	ands	r2, r1
 800073a:	601a      	str	r2, [r3, #0]
		// set the MODE register for the specific pin
		pGPIOHandle->pGPIOx->MODER |= temp;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6819      	ldr	r1, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	430a      	orrs	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	e095      	b.n	800087a <GPIO_Init+0x18e>
	}
	else
	{
		//The interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d117      	bne.n	8000786 <GPIO_Init+0x9a>
		{
			//1. Configure FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <GPIO_Init+0x2ec>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	4611      	mov	r1, r2
 8000766:	4a9c      	ldr	r2, [pc, #624]	; (80009d8 <GPIO_Init+0x2ec>)
 8000768:	430b      	orrs	r3, r1
 800076a:	60d3      	str	r3, [r2, #12]
			//Also reset the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076c:	4b9a      	ldr	r3, [pc, #616]	; (80009d8 <GPIO_Init+0x2ec>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	43d2      	mvns	r2, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a96      	ldr	r2, [pc, #600]	; (80009d8 <GPIO_Init+0x2ec>)
 8000780:	400b      	ands	r3, r1
 8000782:	6093      	str	r3, [r2, #8]
 8000784:	e035      	b.n	80007f2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d117      	bne.n	80007be <GPIO_Init+0xd2>
		{
			//1. Configure RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b92      	ldr	r3, [pc, #584]	; (80009d8 <GPIO_Init+0x2ec>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	4611      	mov	r1, r2
 800079e:	4a8e      	ldr	r2, [pc, #568]	; (80009d8 <GPIO_Init+0x2ec>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]
			//Also reset the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b8c      	ldr	r3, [pc, #560]	; (80009d8 <GPIO_Init+0x2ec>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	43d2      	mvns	r2, r2
 80007b4:	4611      	mov	r1, r2
 80007b6:	4a88      	ldr	r2, [pc, #544]	; (80009d8 <GPIO_Init+0x2ec>)
 80007b8:	400b      	ands	r3, r1
 80007ba:	60d3      	str	r3, [r2, #12]
 80007bc:	e019      	b.n	80007f2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d115      	bne.n	80007f2 <GPIO_Init+0x106>
		{
			//1. Configure FTSR and RTSR both
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <GPIO_Init+0x2ec>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	7912      	ldrb	r2, [r2, #4]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a80      	ldr	r2, [pc, #512]	; (80009d8 <GPIO_Init+0x2ec>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <GPIO_Init+0x2ec>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7912      	ldrb	r2, [r2, #4]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a7a      	ldr	r2, [pc, #488]	; (80009d8 <GPIO_Init+0x2ec>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6093      	str	r3, [r2, #8]

		}

		//2. Configure the PORT selection in SYSCFG_EXTICR
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;			//Finds the EXTI register to be configured, each register has 4 EXTIx
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;			//Finds the position of EXTIx in the EXTI register
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	f003 0303 	and.w	r3, r3, #3
 8000802:	72bb      	strb	r3, [r7, #10]

		SYSCFG_CLK_EN();
 8000804:	4b75      	ldr	r3, [pc, #468]	; (80009dc <GPIO_Init+0x2f0>)
 8000806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000808:	4a74      	ldr	r2, [pc, #464]	; (80009dc <GPIO_Init+0x2f0>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t portcode = CONV_GPIOx_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fe2d 	bl	8000474 <CONV_GPIOx_TO_PORTCODE>
 800081a:	4603      	mov	r3, r0
 800081c:	727b      	strb	r3, [r7, #9]

		SYSCFG->EXTICR[temp1] &= ~(0xF << 4*temp2);
 800081e:	4a70      	ldr	r2, [pc, #448]	; (80009e0 <GPIO_Init+0x2f4>)
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	3302      	adds	r3, #2
 8000824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000828:	7abb      	ldrb	r3, [r7, #10]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	210f      	movs	r1, #15
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	4618      	mov	r0, r3
 8000836:	496a      	ldr	r1, [pc, #424]	; (80009e0 <GPIO_Init+0x2f4>)
 8000838:	7afb      	ldrb	r3, [r7, #11]
 800083a:	4002      	ands	r2, r0
 800083c:	3302      	adds	r3, #2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= (portcode << 4*temp2);
 8000842:	4a67      	ldr	r2, [pc, #412]	; (80009e0 <GPIO_Init+0x2f4>)
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	3302      	adds	r3, #2
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	7a79      	ldrb	r1, [r7, #9]
 800084e:	7abb      	ldrb	r3, [r7, #10]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	4618      	mov	r0, r3
 8000858:	4961      	ldr	r1, [pc, #388]	; (80009e0 <GPIO_Init+0x2f4>)
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	4302      	orrs	r2, r0
 800085e:	3302      	adds	r3, #2
 8000860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt management register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <GPIO_Init+0x2ec>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a58      	ldr	r2, [pc, #352]	; (80009d8 <GPIO_Init+0x2ec>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6013      	str	r3, [r2, #0]


	}
	temp = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]

	//2. Configure the speed of the GPIO pin
	//Left shifting 2 bit SPEED value for specific PIN number
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	799b      	ldrb	r3, [r3, #6]
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2103      	movs	r1, #3
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	400a      	ands	r2, r1
 80008ac:	609a      	str	r2, [r3, #8]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6899      	ldr	r1, [r3, #8]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	609a      	str	r2, [r3, #8]

	temp = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]

	//3. Configure the Pull-up Pull-down setting
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68da      	ldr	r2, [r3, #12]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	791b      	ldrb	r3, [r3, #4]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2103      	movs	r1, #3
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	400a      	ands	r2, r1
 80008f0:	60da      	str	r2, [r3, #12]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68d9      	ldr	r1, [r3, #12]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	430a      	orrs	r2, r1
 8000900:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]

	//4. Configure the Output type
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a1b      	ldrb	r3, [r3, #8]
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	60fb      	str	r3, [r7, #12]

	// Clear the register values for specific pin
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	4619      	mov	r1, r3
 8000922:	2301      	movs	r3, #1
 8000924:	408b      	lsls	r3, r1
 8000926:	43db      	mvns	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	400a      	ands	r2, r1
 8000930:	605a      	str	r2, [r3, #4]
	// set the MODE register for the specific pin
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6859      	ldr	r1, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	430a      	orrs	r2, r1
 8000940:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	795b      	ldrb	r3, [r3, #5]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d13d      	bne.n	80009ca <GPIO_Init+0x2de>
	{
		uint8_t temp1;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	723b      	strb	r3, [r7, #8]
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp1) );
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7a5b      	ldrb	r3, [r3, #9]
 800095c:	461a      	mov	r2, r3
 800095e:	7a3b      	ldrb	r3, [r7, #8]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	2b07      	cmp	r3, #7
 800096e:	d816      	bhi.n	800099e <GPIO_Init+0x2b2>
			{
				pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (4 * temp1) );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	210f      	movs	r1, #15
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFRL |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6a19      	ldr	r1, [r3, #32]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	621a      	str	r2, [r3, #32]
 800099c:	e015      	b.n	80009ca <GPIO_Init+0x2de>
			}
			else
			{
				pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * temp1) );
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a4:	7a3b      	ldrb	r3, [r7, #8]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	210f      	movs	r1, #15
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	400a      	ands	r2, r1
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFRH |= temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
			}
	}
	temp = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013c00 	.word	0x40013c00
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40013800 	.word	0x40013800

080009e4 <GPIO_WriteToOPPin>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void GPIO_WriteToOPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
 80009f0:	4613      	mov	r3, r2
 80009f2:	70bb      	strb	r3, [r7, #2]
	if (value == SET)						// SET =	1
 80009f4:	78bb      	ldrb	r3, [r7, #2]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d109      	bne.n	8000a0e <GPIO_WriteToOPPin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	78fa      	ldrb	r2, [r7, #3]
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	615a      	str	r2, [r3, #20]
	}
	else if (value == RESET)				// RESET =	0
	{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000a0c:	e00c      	b.n	8000a28 <GPIO_WriteToOPPin+0x44>
	else if (value == RESET)				// RESET =	0
 8000a0e:	78bb      	ldrb	r3, [r7, #2]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d109      	bne.n	8000a28 <GPIO_WriteToOPPin+0x44>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	615a      	str	r2, [r3, #20]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SPI_PClkCtrl>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_PClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d120      	bne.n	8000a88 <SPI_PClkCtrl+0x54>
	{
		if (pSPIx == SPI1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <SPI_PClkCtrl+0xa0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d106      	bne.n	8000a5c <SPI_PClkCtrl+0x28>
		{
			SPI1_CLK_EN();
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_CLK_DI();
		}
	}
}
 8000a5a:	e035      	b.n	8000ac8 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <SPI_PClkCtrl+0xa8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <SPI_PClkCtrl+0x3e>
			SPI2_CLK_EN();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a70:	e02a      	b.n	8000ac8 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <SPI_PClkCtrl+0xac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d126      	bne.n	8000ac8 <SPI_PClkCtrl+0x94>
			SPI3_CLK_EN();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a86:	e01f      	b.n	8000ac8 <SPI_PClkCtrl+0x94>
		if (pSPIx == SPI1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <SPI_PClkCtrl+0xa0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <SPI_PClkCtrl+0x6a>
			SPI1_CLK_DI();
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a9a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a9c:	e014      	b.n	8000ac8 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI2)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <SPI_PClkCtrl+0xa8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <SPI_PClkCtrl+0x80>
			SPI2_CLK_DI();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab2:	e009      	b.n	8000ac8 <SPI_PClkCtrl+0x94>
		else if (pSPIx == SPI3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SPI_PClkCtrl+0xac>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d105      	bne.n	8000ac8 <SPI_PClkCtrl+0x94>
			SPI3_CLK_DI();
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SPI_PClkCtrl+0xa4>)
 8000ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40003800 	.word	0x40003800
 8000ae0:	40003c00 	.word	0x40003c00

08000ae4 <SPI_Init>:
 * @return		-	none
 *
 * @note		-	none
 -----------------------------------------------------------------------------------------*/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	//0. Enable the Peripheral clock				(Updated on 19-Feb-2021)
	SPI_PClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff9e 	bl	8000a34 <SPI_PClkCtrl>

	uint32_t tempreg = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]

	//1. Configure the device modes
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DeviceMode) << SPI_CR1_MSTR );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

	//2. Configure the BUS Config
	if (pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_FULL_DUP)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	795b      	ldrb	r3, [r3, #5]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d104      	bne.n	8000b1c <SPI_Init+0x38>
	{
		//Use unidirectional mode, ie, Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE );
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e014      	b.n	8000b46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_HALF_DUP)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	795b      	ldrb	r3, [r3, #5]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d104      	bne.n	8000b2e <SPI_Init+0x4a>
	{
		//Set BIDIMODE
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e00b      	b.n	8000b46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RX)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d107      	bne.n	8000b46 <SPI_Init+0x62>
	{
		//Clear BIDIMODE
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b3c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b44:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the Data Frame Format
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_DFF) << SPI_CR1_DFF);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	799b      	ldrb	r3, [r3, #6]
 8000b4a:	02db      	lsls	r3, r3, #11
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

	//4. Configure the Clock Phase
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPHA) << SPI_CR1_CPHA);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	79db      	ldrb	r3, [r3, #7]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

	//5. Configure the Clock Polarity
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_CPOL) << SPI_CR1_CPOL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7a1b      	ldrb	r3, [r3, #8]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]

	//6. Configure Slave Select Mode
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SSM) << SPI_CR1_SSM);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7a5b      	ldrb	r3, [r3, #9]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

	//7. Configure Serial Clock Speed
	tempreg |= ( (pSPIHandle->SPI_PinConfig.SPI_SCLKSpeed) << SPI_CR1_BR);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7a9b      	ldrb	r3, [r3, #10]
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <FlagStatus>:
		SPI3_RESET();
	}
}

uint8_t	FlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
	if ( pSPIx->SR & FlagName )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <FlagStatus+0x1a>
	{
		return FLAG_SET;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <FlagStatus+0x1c>
	}
	else
	{
		return FLAG_RESET;
 8000bb4:	2300      	movs	r3, #0
	}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SPI_DataSend>:
 * @return		-	none
 *
 * @note		- This is a blocking call
 -----------------------------------------------------------------------------------------*/
void SPI_DataSend(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLen)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000bce:	e027      	b.n	8000c20 <SPI_DataSend+0x5e>
	{
		//1. Wait until TX buffer is empty
		while ( ( FlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) );
 8000bd0:	bf00      	nop
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff ffe0 	bl	8000b9a <FlagStatus>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f8      	beq.n	8000bd2 <SPI_DataSend+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00e      	beq.n	8000c0a <SPI_DataSend+0x48>
		{
			// 16 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen twice
			DataLen--;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			(uint16_t*)pTxBuffer++;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	e00a      	b.n	8000c20 <SPI_DataSend+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data in DR register
			pSPIx->DR = *(pTxBuffer);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	60da      	str	r2, [r3, #12]
			//2. Decrease DataLen
			DataLen--;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
			//3. Increment TX buffer
			pTxBuffer++;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1d4      	bne.n	8000bd0 <SPI_DataSend+0xe>
		}
	}
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <SPI_DataReceive>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_DataReceive(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLen)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	while (DataLen > 0)
 8000c3a:	e027      	b.n	8000c8c <SPI_DataReceive+0x5e>
	{
		//1. Wait until Rx buffer is available
		while (FlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000c3c:	bf00      	nop
 8000c3e:	2101      	movs	r1, #1
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ffaa 	bl	8000b9a <FlagStatus>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f8      	beq.n	8000c3e <SPI_DataReceive+0x10>

		//2. Check the DFF bit in CR1 register
		if ( ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00e      	beq.n	8000c76 <SPI_DataReceive+0x48>
		{
			// 16 bit data format
			//1. Load the data from DR to buffer
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	801a      	strh	r2, [r3, #0]
			//2. Decrease DataLen twice
			DataLen--;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
			DataLen--;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			(uint16_t*)pRxBuffer++;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e00a      	b.n	8000c8c <SPI_DataReceive+0x5e>
		}
		else
		{
			// 8 bit data format
			//1. Load the data from DR to buffer
			*(pRxBuffer) = pSPIx->DR;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	701a      	strb	r2, [r3, #0]
			//2. Decrease DataLen
			DataLen--;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
			//3. Increment RX Buffer
			pRxBuffer++;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1d4      	bne.n	8000c3c <SPI_DataReceive+0xe>
		}
	}
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SPI_PCtrl>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_PCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d106      	bne.n	8000cba <SPI_PCtrl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000cb8:	e005      	b.n	8000cc6 <SPI_PCtrl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SPI_SSOEConfig>:
 * @return		-	none
 *
 * @note		-
 -----------------------------------------------------------------------------------------*/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d106      	bne.n	8000cf2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f043 0204 	orr.w	r2, r3, #4
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000cf0:	e005      	b.n	8000cfe <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f023 0204 	bic.w	r2, r3, #4
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	605a      	str	r2, [r3, #4]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <__libc_init_array>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	4e0d      	ldr	r6, [pc, #52]	; (8000d44 <__libc_init_array+0x38>)
 8000d10:	4c0d      	ldr	r4, [pc, #52]	; (8000d48 <__libc_init_array+0x3c>)
 8000d12:	1ba4      	subs	r4, r4, r6
 8000d14:	10a4      	asrs	r4, r4, #2
 8000d16:	2500      	movs	r5, #0
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	d109      	bne.n	8000d30 <__libc_init_array+0x24>
 8000d1c:	4e0b      	ldr	r6, [pc, #44]	; (8000d4c <__libc_init_array+0x40>)
 8000d1e:	4c0c      	ldr	r4, [pc, #48]	; (8000d50 <__libc_init_array+0x44>)
 8000d20:	f000 f818 	bl	8000d54 <_init>
 8000d24:	1ba4      	subs	r4, r4, r6
 8000d26:	10a4      	asrs	r4, r4, #2
 8000d28:	2500      	movs	r5, #0
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	d105      	bne.n	8000d3a <__libc_init_array+0x2e>
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d34:	4798      	blx	r3
 8000d36:	3501      	adds	r5, #1
 8000d38:	e7ee      	b.n	8000d18 <__libc_init_array+0xc>
 8000d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d3e:	4798      	blx	r3
 8000d40:	3501      	adds	r5, #1
 8000d42:	e7f2      	b.n	8000d2a <__libc_init_array+0x1e>
 8000d44:	08000d6c 	.word	0x08000d6c
 8000d48:	08000d6c 	.word	0x08000d6c
 8000d4c:	08000d6c 	.word	0x08000d6c
 8000d50:	08000d70 	.word	0x08000d70

08000d54 <_init>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr

08000d60 <_fini>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr
